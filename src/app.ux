<script>
import file from '@system.file';

// 定义常量，确保与页面中的路径一致
const FILE_PLAY_LIST = 'internal://files/play_list.json';

export default {
  /**
   * 应用的 onCreate 生命周期，在应用冷启动时执行。
   */
  onCreate() {
    console.info('App onCreate: 应用启动');
    // 你可以在这里保留或添加其他应用级的初始化逻辑，
    // 例如重置下载状态等。
    this.resetDownloadingStatusOnLaunch();
  },

  onDestroy() {
    console.info('App onDestroy: 应用销毁');
  },

  /**
   * @description 在应用启动时，异步重置所有“正在下载”的状态。
   * 这是为了处理因应用异常退出而导致的状态不一致问题。
   */
  resetDownloadingStatusOnLaunch() {
    console.info('开始检查并重置下载状态...');
    file.readText({
      uri: FILE_PLAY_LIST,
      success: (data) => {
        if (!data || !data.text) {
          console.info('播放列表为空，无需重置。');
          return;
        }
        try {
          let playList = JSON.parse(data.text);
          let statusChanged = false;
          playList = playList.map(song => {
            if (song.downloadStatus === 'downloading') {
              console.warn(`发现悬空下载任务: ${song.name} (ID: ${song.id})，状态将被重置。`);
              song.downloadStatus = 'failed';
              statusChanged = true;
            }
            return song;
          });
          if (statusChanged) {
            console.info('正在将重置后的播放列表写回文件...');
            file.writeText({
              uri: FILE_PLAY_LIST,
              text: JSON.stringify(playList, null, 2),
              success: () => console.info('下载状态重置完成。'),
              fail: (err, code) => console.error(`写回播放列表失败，码: ${code}`)
            });
          } else {
            console.info('未发现悬空下载任务，无需重置。');
          }
        } catch (e) {
          console.error('解析播放列表JSON时发生错误:', e);
        }
      },
      fail: (data, code) => {
        if (code !== 301) { // 忽略文件不存在的错误
          console.error(`读取播放列表文件失败，错误码: ${code}`);
        }
      }
    });
  }
};
</script>
