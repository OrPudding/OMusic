<template>
    <div class="volume">
      <!-- 音量控制 (无变化) -->
      <div class="volume-bar-container">
        <image class="action-icon" src="/common/icon/minus.png" onclick="changeVolume(-1)"></image>
        <div class="volume-progress-container">
          <progress class="volume-progress" percent="{{volume}}"></progress>
        </div>
        <image class="action-icon" src="/common/icon/plus.png" onclick="changeVolume(1)"></image>
      </div>
  
      <!-- 操作控制 -->
      <div class="control-container">
        <!-- 收藏图标 (所有屏幕都显示) -->
        <image class="icon" id="favoriteIcon" src="{{ favoriteIcon }}" onclick="toggleFavorite"></image>
  
          <image class="icon" src="{{ downloadIcon }}" onclick="handleDownloadClick"></image>
          <image class="icon" src="{{ playModeIcon }}" onclick="handlePlayModeClick"></image>

      </div>
  
      <!-- 返回按钮 (无变化) -->
      <div class="cancel-container">
        <image class="action-icon" src="/common/icon/cancel.png" onclick="goBack"></image>
      </div>
    </div>
  </template>
  
  <script>
  import router from "@system.router";
  import audio from "@system.audio";
  import file from "@system.file";
  import prompt from "@system.prompt";
  
  const CONSTANTS = {
      FILE_FAVORITES: 'internal://files/favorites.json',
      FILE_DOWNLOADED_SONGS: 'internal://files/downloaded_songs.json',
  };
  
  const fileService = {
      _promisify(fn, options) {
          return new Promise((resolve, reject) => {
              fn({ ...options, success: resolve, fail: (data, code) => reject({ data, code }) });
          });
      },
      async readJson(uri, defaultValue = null) {
          try {
              const data = await this._promisify(file.readText, { uri });
              return JSON.parse(data.text);
          } catch (e) { return defaultValue; }
      },
      async writeJson(uri, data) {
          try {
              await this._promisify(file.writeText, { uri, text: JSON.stringify(data, null, 2) });
              return true;
          } catch (e) { return false; }
      },
  };
  
  export default {
      private: {
          volume: 0,
          currentSong: null,
          favorites: {},
          isFavorited: false,
          downloadedSongs: {},
          downloadState: 'not_downloaded',
          screenShape: 'circle',
          playMode: 0,
      },
    
      computed: {
          downloadIcon() {
              const icons = {
                  downloading: '/common/icon/downloading.png',
                  downloaded: '/common/icon/downloaded.png',
                  not_downloaded: '/common/icon/download.png',
              };
              return icons[this.downloadState] || icons.not_downloaded;
          },
          favoriteIcon() {
              return this.isFavorited ? '/common/icon/liked.png' : '/common/icon/like.png';
          },
          playModeIcon() {
              const icons = [
                  '/common/icon/loop.png',
                  '/common/icon/single-loop.png',
                  '/common/icon/random.png'
              ];
              return icons[this.playMode] || icons[0];
          }
      },
  
      protected: {
          currentSong: {},
          screenShape: 'circle',
          playMode: 0,
          isDownloading: false,
      },
  
      async onInit() {
          this.volume = audio.volume * 100;
          
          this.screenShape = this.screenShape || 'circle';
          this.playMode = this.playMode || 0;
          
          let songData = this.currentSong;
          try {
              if (typeof songData === 'string') songData = JSON.parse(songData);
          } catch (e) {
              prompt.showToast({ message: '歌曲信息错误' });
              router.back();
              return;
          }
          this.currentSong = songData;
  
          if (!this.currentSong || !this.currentSong.id) {
              prompt.showToast({ message: '歌曲信息无效' });
              router.back();
              return;
          }
  
          await this.loadInitialState();
      },
  
      async onShow() {
          await this.loadInitialState();
      },
  
      async loadInitialState() {
          const [favorites, downloadedSongs] = await Promise.all([
              fileService.readJson(CONSTANTS.FILE_FAVORITES, {}),
              fileService.readJson(CONSTANTS.FILE_DOWNLOADED_SONGS, {}),
          ]);
  
          this.favorites = favorites;
          this.downloadedSongs = downloadedSongs;
  
          this.updateFavoriteStatus();
          this.updateDownloadStatus();
      },
  
      updateFavoriteStatus() {
          if (this.currentSong) {
              this.isFavorited = !!this.favorites[this.currentSong.id];
          }
      },
  
      updateDownloadStatus() {
          if (this.isDownloading) {
              this.downloadState = 'downloading';
          } else if (this.currentSong && this.downloadedSongs[this.currentSong.id]) {
              this.downloadState = 'downloaded';
          } else {
              this.downloadState = 'not_downloaded';
          }
      },
  
      changeVolume(direction) {
          const newVolume = this.volume + (direction * 10);
          this.volume = Math.max(0, Math.min(100, newVolume));
          audio.volume = this.volume / 100;
      },
  
      toggleFavorite() {
          if (!this.currentSong) return;
          const { id } = this.currentSong;
          if (this.isFavorited) {
              delete this.favorites[id];
              prompt.showToast({ message: '已取消收藏' });
          } else {
              this.favorites[id] = { id: this.currentSong.id, name: this.currentSong.name, artists: this.currentSong.artists };
              prompt.showToast({ message: '已收藏' });
          }
          this.isFavorited = !this.isFavorited;
          fileService.writeJson(CONSTANTS.FILE_FAVORITES, this.favorites);
      },
  
      handleDownloadClick() {
          if (this.downloadState === 'downloaded') {
              prompt.showToast({ message: '歌曲已下载' });
              return;
          }
          if (this.downloadState === 'downloading') {
              prompt.showToast({ message: '正在下载中...' });
              return;
          }
          prompt.showToast({ message: '即将开始下载...' });
          router.push({
              uri: '/pages/player',
              params: { triggerDownload: true }
          });
      },
  
      handlePlayModeClick() {
          prompt.showToast({ message: '切换播放模式' });
          router.push({
              uri: '/pages/player',
              params: { triggerPlayModeToggle: true }
          });
      },
  
      goBack() {
          router.back();
      },
  };
  </script>
  
  <style>
  .volume {
    width: 100%;
    height: 100%;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    background-color: #000;
  }
  .volume-bar-container {
    width: 80%;
    height: 80px;
    justify-content: space-around;
    align-items: center;
    background-color: #2a2a2a;
    border-radius: 70px;
  }
  .volume-progress-container {
    width: 50%;
    height: 30px;
    justify-content: center;
    align-items: center;
  }
  .action-icon {
    width: 60px;
    height: 60px;
  }
  .control-container {
    margin-top: 20px;
    width: 80%;
    justify-content: space-around; /* 改为居中 */
    align-items: center;
  }
  .icon {
    width: 80px;
    height: 80px;
  }
  .volume-progress {
    color: #3ae1ff;
    stroke-width: 30px;
    layer-color: rgba(255, 255, 255, 0.1);
  }
  .cancel-container {
    position: absolute;
    width: 100px;
    height: 100px;
    bottom: 18px;
    justify-content: center;
    align-items: center;
  }
  </style>
  