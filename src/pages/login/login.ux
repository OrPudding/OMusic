<template>
	<div class="page-container">
		<!-- 头部信息 -->
		<div class="header" onclick="back">
			<text class="time-display">{{ currentTime }}</text>
			<text class="title">‹账号登录</text>
		</div>

        <!-- 状态指示器 -->
		<div class="status-wrapper">
			<image class="status-icon" src="{{ connectionIcon }}"></image>
			<text class="status-text">{{ connectionStatus }}</text>
		</div>

		<text class="tip">请在AstroBox插件中输入Cookie</text>

		<!-- 手动输入UID入口 -->
		<text class="manual-input-trigger" onclick="toggleUidInput(true)">
			或者手动输入用户ID
		</text>

		<!-- 手动输入UID覆盖层 -->
		<div class="uid-input-overlay" if="{{ showUidInput }}">
			<div class="input-panel">
				<div class="uid-display-wrapper">
					<text class="uid-display">{{ uidInput || "" }}</text>
				</div>
				<div class="keyboard">
					<div class="key-row">
						<text class="key" onclick="handleKeyPress('1')">1</text>
						<text class="key" onclick="handleKeyPress('2')">2</text>
						<text class="key" onclick="handleKeyPress('3')">3</text>
					</div>
					<div class="key-row">
						<text class="key" onclick="handleKeyPress('4')">4</text>
						<text class="key" onclick="handleKeyPress('5')">5</text>
						<text class="key" onclick="handleKeyPress('6')">6</text>
					</div>
					<div class="key-row">
						<text class="key" onclick="handleKeyPress('7')">7</text>
						<text class="key" onclick="handleKeyPress('8')">8</text>
						<text class="key" onclick="handleKeyPress('9')">9</text>
					</div>
					<div class="key-row">
						<text class="key action-key" onclick="toggleUidInput(false)">
							取消
						</text>
						<text class="key" onclick="handleKeyPress('0')">0</text>
						<text class="key action-key" onclick="handleKeyPress('退格')">退格</text>
					</div>
				</div>
				<text class="confirm-button" onclick="confirmUid">确认</text>
			</div>
		</div>
	</div>
</template>

<style>
/* ... (样式无变化) ... */
.page-container { width: 100%; height: 100%; flex-direction: column; justify-content: center; align-items: center; background-color: #000000; }
.header { width: 100%; flex-direction: column; justify-content: center; align-items: center; }
.time-display { font-size: 28px; color: #ffffff; font-weight: bold; padding-top: 5px; text-align: center; }
.title { font-size: 32px; padding: 5px; text-align: center; font-weight: bold; color: #fff; }
.status-wrapper { width: 260px; height: 231px; justify-content: center; align-items: center; flex-direction: column; }
.status-icon { width: 80px; height: 80px; margin-bottom: 20px; }
.status-text { font-size: 26px; color: #ffffff; text-align: center; }
.tip { font-size: 26px; color: rgba(255, 255, 255, 1); margin-top: 8px; }
.manual-input-trigger { font-size: 22px; color: #888; text-decoration: underline; margin-bottom: 70px; }
.uid-input-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: #000; justify-content: center; align-items: center; }
.input-panel { width: 320px; flex-direction: column; align-items: center; }
.uid-display-wrapper { width: 60%; height: 50px; background-color: rgba(255, 255, 255, 0.06); border-radius: 18px; justify-content: center; align-items: center; margin-top: 10px; margin-bottom: 20px;  }
.uid-display { color: #fff; font-size: 26px; }
.keyboard { width: 100%; flex-direction: column; }
.key-row { width: 100%; justify-content: space-between; margin-bottom: 12px; }
.key { width: 100px; height: 55px; background-color: rgba(255, 255, 255, 0.1); border-radius: 27.5px; color: #fff; font-size: 28px; font-weight: bold; text-align: center; }
.action-key { font-size: 26px; font-weight: bold; background-color: rgba(255, 255, 255, 0.05); }
.confirm-button { width: 60%; height: 60px; border-radius: 30px; background-color: #3ae1ff; color: #000; font-size: 26px; font-weight: bold; text-align: center; }
@media screen and (shape: rect) {
    .header {
      flex-direction: row-reverse;
      justify-content:space-around
    }
    .time-display {
        font-size: 32px;
    }
    .status-wrapper {  height: 299px;}
    .uid-display-wrapper { width: 80%;}
  }
</style>

<script>
import router from '@system.router';
import prompt from '@system.prompt';
import file from '@system.file';
import request from '@system.request';
// **注意**: fetch 模块不再需要，因为我们只保存cookie，不在此页面发起网络请求

// --- 常量定义 (无变化) ---
const API_BASE = 'https://';
const PROFILE_FILE_URI = 'internal://files/user_profile.json';
const COOKIE_FILE_URI = 'internal://files/cookie.txt';
const AVATAR_CACHE_DIR = 'internal://files/avatars/';
const LOCAL_AVATAR_URI = `${AVATAR_CACHE_DIR}user_avatar.png`;

export default {
    private: {
        connectionStatus: '正在初始化...',
        connectionIcon: '/common/icon/connecting.png',
        showUidInput: false,
        uidInput: '',
        currentTime: "00:00",
    },

    onInit(  ) {
        this.updateTime();
        setInterval(() => this.updateTime(), 1000);
        file.mkdir({ uri: AVATAR_CACHE_DIR });
    },

    onShow() {
        console.log("Login page onShow: 初始化或刷新 Interconnect 逻辑。");
        this.initializeInterconnect();
    },

    onDestroy() {
        const connect = this.$app.$def.connectInstance;
        if (connect) {
            connect.onmessage = null;
        }
    },

    updateTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        this.currentTime = `${hours}:${minutes}`;
    },

    initializeInterconnect() {
        const connect = this.$app.$def.connectInstance;
        if (!connect) {
            this.connectionStatus = '连接初始化失败';
            this.connectionIcon = '/common/icon/error.png';
            return;
        }

        connect.onmessage = (data) => {
            console.log(`Login page received message: ${data.data}`);
            const musicUCookie = data.data;

            if (musicUCookie && musicUCookie.startsWith('MUSIC_U=')) {
                prompt.showToast({ message: '接收到登录凭证！' });
                // **核心修改**: 只保存Cookie，不获取用户信息
                this.handleCookieSave(musicUCookie);
            } else {
                prompt.showToast({ message: '同步数据格式错误' });
            }
        };

        connect.getReadyState({
            success: (data) => {
                this.connectionStatus = data.status === 1 ? '连接成功，等待同步...' : '连接已断开';
                this.connectionIcon = data.status === 1 ? '/common/icon/connected.png' : '/common/icon/disconnected.png';
            },
            fail: () => {
                this.connectionStatus = '获取状态失败';
                this.connectionIcon = '/common/icon/error.png';
            }
        });
    },

    /**
     * **核心新增**: 处理Cookie保存和后续流程
     */
    async handleCookieSave(cookie) {
        try {
            this.connectionStatus = '正在保存凭证...';
            await this.saveCookie(cookie);

            this.connectionStatus = '登录成功！';
            this.connectionIcon = '/common/icon/success.png';
            prompt.showToast({ message: '登录成功！用户信息将在下次启动时更新。' });

            setTimeout(() => router.back(), 1500);

        } catch (error) {
            console.error("保存Cookie失败:", error);
            const errorMessage = error.message || '未知错误';
            this.connectionStatus = `登录失败: ${errorMessage}`;
            this.connectionIcon = '/common/icon/error.png';
            prompt.showToast({ message: `登录失败: ${errorMessage}`, duration: 3000 });
        }
    },

    saveCookie(cookieString) {
        return new Promise((resolve, reject) => {
            file.writeText({
                uri: COOKIE_FILE_URI,
                text: cookieString,
                success: () => {
                    console.log("Cookie保存成功！");
                    if (this.$app.$def.cookieService) {
                        this.$app.$def.cookieService.cookie = cookieString;
                    }
                    resolve();
                },
                fail: (data, code) => reject(new Error(`保存Cookie失败, code: ${code}`)),
            });
        });
    },

    back() {
        router.back();
    },

    // --- 手动输入UID相关方法 (保持不变) ---
    toggleUidInput(show) {
        this.showUidInput = show;
        if (!show) {
            this.uidInput = '';
        }
    },
    handleKeyPress(key) {
        if (key === '退格') {
            this.uidInput = this.uidInput.slice(0, -1);
        } else if (this.uidInput.length < 15) {
            this.uidInput += key;
        }
    },
    async confirmUid() {
        if (!this.uidInput) {
            prompt.showToast({ message: "请输入用户ID" });
            return;
        }
        prompt.showToast({ message: "正在验证用户ID..." });
        
        try {
            // **注意**: 手动输入流程依然需要 fetch，所以需要从全局服务获取
            const request = this.$app.$def.requestService;
            if (!request) throw new Error("内部服务错误");

            const url = `${API_BASE}/user/detail?uid=${this.uidInput}`;
            const response = await request.fetch({ url });

            if (response.status !== 'success') throw new Error(response.message || `网络请求失败, code: ${response.code}`);

            const profile = response.data?.profile;
            if (profile) {
                const localAvatarPath = await this.downloadAndCacheAvatar(profile.avatarUrl);
                const userProfile = {
                    userId: profile.userId,
                    nickname: profile.nickname,
                    avatarUrl: localAvatarPath || '/common/icon/default_avatar.png',
                };
                await this.saveProfileToFile(userProfile);
                prompt.showToast({ message: `欢迎你, ${profile.nickname}` });
                setTimeout(() => router.back(), 1000);
            } else {
                prompt.showToast({ message: "用户ID无效或不存在" });
            }
        } catch (error) {
            console.error("手动验证用户详情失败:", error);
            prompt.showToast({ message: "验证失败，请检查网络" });
        }
    },
    downloadAndCacheAvatar(remoteUrl) {
        return new Promise((resolve) => {
            if (!remoteUrl) { resolve(null); return; }
            const thumbnailUrl = remoteUrl + (remoteUrl.includes('?') ? '&param=100y100' : '?param=100y100');
            request.download({
                url: thumbnailUrl,
                success: (task) => {
                    request.onDownloadComplete({
                        token: task.token,
                        success: (data) => {
                            file.move({
                                srcUri: data.uri,
                                dstUri: LOCAL_AVATAR_URI,
                                success: () => resolve(LOCAL_AVATAR_URI),
                                fail: () => resolve(null),
                            });
                        },
                        fail: () => resolve(null),
                    });
                },
                fail: () => resolve(null),
            });
        });
    },
    saveProfileToFile(profileData) {
        return new Promise((resolve, reject) => {
            file.writeText({
                uri: PROFILE_FILE_URI,
                text: JSON.stringify(profileData, null, 2),
                success: resolve,
                fail: (data, code) => reject(new Error(`保存Profile失败, code: ${code}`)),
            });
        });
    },
};
</script>
