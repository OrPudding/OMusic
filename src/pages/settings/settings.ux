<template>
    <scroll class="page-container" scroll-y="true" bounces="true">
        <div class="header" onclick="goBack">
            <text class="time-display">{{ currentTime }}</text>
            <text class="title">‹设置</text>
        </div>
        <div class="settings-list">
            <!-- 歌词设置 (无变化) -->
            <text class="category-title">歌词显示</text>
            <div class="setting-item">
                <text class="item-label">日语歌词</text>
                <text class="item-value-btn" onclick="toggleJapaneseLyricMode">{{ japaneseLyricModeText }}</text>
            </div>
            <text class="item-desc">适用于同时提供罗马音和翻译的歌曲，如日语、韩语。</text>
            
            <div class="setting-item">
                <text class="item-label">英文歌词</text>
                <text class="item-value-btn" onclick="toggleEnglishLyricMode">{{ englishLyricModeText }}</text>
            </div>
            <text class="item-desc">适用于仅提供原文和翻译的歌曲，如英语、法语等。</text>
  
            <!-- 性能设置 (无变化) -->
            <text class="category-title">列表性能</text>
            <div class="setting-item">
                <text class="item-label">列表渲染数量</text>
                <text class="item-value-btn" onclick="toggleWindowSize">{{ settings.performance.windowSize }}</text>
            </div>
            <text class="item-desc">影响滚动平滑度。XRING设备可设为更高值以获得流畅体验，其他设备建议使用较小值。</text>
            
            <div class="setting-item">
                <text class="item-label">列表加载步长</text>
                <text class="item-value-btn" onclick="togglePageSize">{{ settings.performance.pageSize }}</text>
            </div>
            <text class="item-desc">每次滚动加载的项目数。较大值可减少滚动次数，但会增加单次加载开销。</text>
            
            <!-- 网络与加载设置 (核心修改) -->
            <text class="category-title">网络与加载</text>
            <div class="setting-item">
                <text class="item-label">歌单加载总数</text>
                <text class="item-value-btn" onclick="toggleTotalLimit">{{ settings.network.totalLimit }}</text>
            </div>
            <!-- **优化后文案** -->
            <text class="item-desc">在线歌单的歌曲加载上限。蓝牙网络环境下建议使用较小值，以加快响应速度。</text>
            
            <div class="setting-item">
                <text class="item-label">网络请求分页</text>
                <text class="item-value-btn" onclick="toggleApiPageSize">{{ settings.network.apiPageSize }}</text>
            </div>
            <!-- **优化后文案** -->
            <text class="item-desc">每次网络请求获取的条目数。eSIM网络环境下可设为更高值以减少请求次数。</text>
  
            <!-- 搜索设置 (核心修改) -->
            <text class="category-title">搜索设置</text>
            <div class="setting-item">
                <text class="item-label">最大搜索结果</text>
                <text class="item-value-btn" onclick="toggleSearchTotalLimit">{{ settings.search.totalLimit }}</text>
            </div>
            <!-- **优化后文案** -->
            <text class="item-desc">单次搜索获取的总结果上限。较大值结果更全，但会增加等待时间。</text>
            
            <div class="setting-item">
                <text class="item-label">搜索请求分页</text>
                <text class="item-value-btn" onclick="toggleSearchApiPageSize">{{ settings.search.apiPageSize }}</text>
            </div>
            <!-- **优化后文案** -->
            <text class="item-desc">每次网络请求获取的搜索结果数。蓝牙网络环境下建议使用较小值。</text>
  
            <!-- 退出登录 (保持不变) -->
            <div class="logout-section">
              <div class="logout-button" onclick="handleLogout">
                  <text class="logout-text">退出登录</text>
              </div>
            </div>
        </div>



</scroll>
  </template>
  
<style>
    .page-container {
        width: 100%;
        height: 100%;
        flex-direction: column;
        align-items: center;
        background-color: black;
    }
    .header {
        width: 100%;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    .time-display {
        font-size: 28px;
        color: #ffffff;
        font-weight: bold;
        padding-top: 5px;
        text-align: center;
    }
    .title {
        font-size: 32px;
        padding: 5px;
        text-align: center;
        font-weight: bold;
        color: #fff;
    }
    .settings-list {
        width: 360px;
        flex-direction: column;
        align-items: center;
        padding: 0 0 40px 0;
    }
    .category-title {
        width: 96%;
        font-size: 26px;
        font-weight: bold;
        color: #888;
        padding: 20px 0 5px 15px;
        margin-bottom: 10px;
    }
    .setting-item {
        width: 100%;
        height: 80px;
        padding: 0 20px;
        margin: 10px 0;
        background-color: rgba(255, 255, 255, 0.06);
        border-radius: 40px;
        justify-content: space-between;
        align-items: center;
    }
    .item-label {
        font-weight: bold;
        font-size: 26px;
        color: #fff;
    }
    .item-value-btn {
        min-width: 100px;
        height: 50px;
        padding: 0 20px;
        background-color: rgba(58, 225, 255, 0.2);
        border-radius: 25px;
        color: #3ae1ff;
        font-size: 24px;
        font-weight: bold;
        text-align: center;
    }
    .item-desc {
        width: 85%;
        font-size: 20px;
        color: #666;
        margin-top: -5px;
        margin-bottom: 20px;
    }

    .logout-section {
    width: 240px;
    padding: 20px 40px; /* 上下留出间距 */
}

.logout-button {
    width: 100%;
    height: 80px;
    background-color: rgba(255, 59, 48, 0.2); /* 红色背景，半透明 */
    border-radius: 40px; /* 完全圆角 */
    justify-content: center;
    align-items: center;
}

.logout-text {
    font-size: 28px;
    color: #FF453A; /* 亮红色文字 */
    font-weight: bold;
}
</style>
<script>
import router from '@system.router';
import file from '@system.file';
import prompt from '@system.prompt';

const SETTINGS_FILE_URI = 'internal://files/settings.json';
const PROFILE_FILE_URI = 'internal://files/user_profile.json';
const AVATAR_CACHE_URI = 'internal://files/avatars/user_avatar.png';
const COOKIE_FILE_URI = 'internal://files/cookie.txt';

// 预设的档位
const PRESETS = {
    lyrics: {
        japaneseMode: ['translation', 'romaji', 'original'],
        englishMode: ['translation', 'original'],
    },
    performance: {
        windowSize: [20, 30, 40],
        pageSize: [10, 15, 20],
    },
    network: {
        totalLimit: [50, 200, 500],
        apiPageSize: [20, 50, 100],
    },
    // **新增**: 搜索设置的档位
    search: {
        totalLimit: [10, 25, 50],
        apiPageSize: [5, 10, 25],
    }
};

export default {
    private: {
        currentTime: '00:00',
        // 默认设置，作为加载失败时的备用
        settings: {
            lyrics: {
                japaneseMode: 'translation',
                englishMode: 'translation',
            },
            performance: {
                windowSize: 30,
                pageSize: 15,
            },
            network: {
                totalLimit: 200,
                apiPageSize: 50,
            },
            // **新增**: 搜索的默认设置
            search: {
                totalLimit: 25,
                apiPageSize: 10,
            }
        },
    },

    computed: {
        japaneseLyricModeText() {
            const map = { 'translation': '显示翻译', 'romaji': '显示罗马音', 'original': '仅显示原文' };
            return map[this.settings.lyrics.japaneseMode] || '未知';
        },
        englishLyricModeText() {
            const map = { 'translation': '显示翻译', 'original': '仅显示原文' };
            return map[this.settings.lyrics.englishMode] || '未知';
        }
    },

    onInit() {
        this.updateTime();
        setInterval(() => this.updateTime(), 1000);
        this.loadSettings();
    },

    updateTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        this.currentTime = `${hours}:${minutes}`;
    },

    loadSettings() {
        file.readText({
            uri: SETTINGS_FILE_URI,
            success: (data) => {
                try {
                    const loadedSettings = JSON.parse(data.text);
                    // 深层合并，防止因新增设置项导致旧版配置文件出错
                    this.settings = {
                        ...this.settings,
                        ...loadedSettings,
                        lyrics: { ...this.settings.lyrics, ...(loadedSettings.lyrics || {}) },
                        performance: { ...this.settings.performance, ...(loadedSettings.performance || {}) },
                        network: { ...this.settings.network, ...(loadedSettings.network || {}) },
                        search: { ...this.settings.search, ...(loadedSettings.search || {}) }, // **新增**: 合并搜索设置
                    };
                } catch (e) {
                    console.error("解析设置文件失败，将保存默认设置。");
                    this.saveSettings();
                }
            },
            fail: () => {
                console.log("设置文件不存在，将创建并保存默认设置。");
                this.saveSettings();
            }
        });
    },

    saveSettings() {
        file.writeText({
            uri: SETTINGS_FILE_URI,
            text: JSON.stringify(this.settings, null, 2),
            success: () => {
            },
            fail: () => {
            }
        });
    },

    _toggleSetting(category, key, presets) {
        const currentValue = this.settings[category][key];
        const currentIndex = presets.indexOf(currentValue);
        const nextIndex = (currentIndex + 1) % presets.length;
        this.settings[category][key] = presets[nextIndex];
        this.saveSettings();
    },

    toggleJapaneseLyricMode() { this._toggleSetting('lyrics', 'japaneseMode', PRESETS.lyrics.japaneseMode); },
    toggleEnglishLyricMode() { this._toggleSetting('lyrics', 'englishMode', PRESETS.lyrics.englishMode); },
    toggleWindowSize() { this._toggleSetting('performance', 'windowSize', PRESETS.performance.windowSize); },
    togglePageSize() { this._toggleSetting('performance', 'pageSize', PRESETS.performance.pageSize); },
    toggleTotalLimit() { this._toggleSetting('network', 'totalLimit', PRESETS.network.totalLimit); },
    toggleApiPageSize() { this._toggleSetting('network', 'apiPageSize', PRESETS.network.apiPageSize); },
    // **新增**: 切换搜索设置的方法
    toggleSearchTotalLimit() { this._toggleSetting('search', 'totalLimit', PRESETS.search.totalLimit); },
    toggleSearchApiPageSize() { this._toggleSetting('search', 'apiPageSize', PRESETS.search.apiPageSize); },

    handleLogout() {
        prompt.showDialog({
            title: '退出登录',
            message: '您确定要退出登录吗？这将清除您的本地用户数据。',
            buttons: [
                { text: '取消', color: '#999999' },
                { text: '确定', color: '#FF453A' }
            ],
            success: async () => {
                prompt.showToast({ message: '正在退出...' });
                try {
                    await Promise.all([
                        this.deleteFile(PROFILE_FILE_URI),
                        this.deleteFile(AVATAR_CACHE_URI),
                        this.deleteFile(COOKIE_FILE_URI)
                    ]);
                    if (this.$app.$def.cookieService) {
                        this.$app.$def.cookieService.cookie = null;
                    }
                    prompt.showToast({ message: '已退出登录' });
                    router.back();
                } catch (error) {
                    console.error("退出登录失败:", error);
                    prompt.showToast({ message: '操作失败，请重试' });
                }
            },
            cancel: () => {
                prompt.showToast({ message: '操作已取消' });
            },
        });
    },

    async deleteFile(uri) {
        return new Promise((resolve) => {
            file.delete({ uri: uri, success: resolve, fail: resolve });
        });
    },

    goBack() {
        router.back();
    }
};
</script>
