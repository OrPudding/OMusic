<template>
    <div>
    <!-- 
      ===================================================================
       新增状态三：用户协议 (EULA) 展示
      ===================================================================
    -->
    <scroll if="{{ verificationState === 'eula' }}" class="eula-container" scroll-y="true" bounces="true" onscrollbottom="handleScrollEnd">
        <text class="eula-title">服务协议和隐私政策</text>
            <text class="eula-text">{{ eulaText }}</text>
        <div class="eula-footer">
            <div class="eula-buttons">
                <text class="eula-button-disagree" onclick="handleDisagree">不同意并退出</text>
                <!-- 按钮的样式会根据 isAgreeButtonActive 动态改变 -->
                <!-- ==================== 核心修改点 1: 使用三元运算符动态显示文本 ==================== -->
                <text class="{{ isAgreeButtonActive ? 'eula-button-agree-active' : 'eula-button-agree' }}" onclick="handleAgree">
                    {{ agreeButtonText }}
                </text>

            </div>
        </div>
    </scroll>

    <!-- 状态一：加载与验证中 -->
    <div elif="{{ verificationState === 'verifying' }}" class="verifying-content">
        <image class="logo" src="/common/icon.png"></image>
        <text class="app-name">OMusic</text>
    </div>

    <!-- 状态二：验证失败，显示最终优化后的引导页 -->
    <div elif="{{ verificationState === 'failed' }}" class="activation-content">
        <scroll class="splash-container" scroll-y="true" bounces="true">
            <div class="header" onclick="back">
                <text class="time-display">{{ currentTime }}</text>
                <text class="title">‹软件激活</text>
            </div>
            <div class="info-capsule">
                <text class="capsule-title">第一步：扫码购买</text>
                <qrcode value="{{ afdianPurchaseUrl }}" class="qrcode-component-large"></qrcode>
                <text class="capsule-tip">请用手机扫码，打开爱发电页面</text>
            </div>
            <div class="info-capsule">
                <text class="capsule-title">第二步：扫码复制ID并备注</text>
                    <qrcode value="{{ deviceId }}" class="qrcode-component-small"></qrcode>
                        <text class="capsule-tip">购买时，扫码复制上方ID并填入订单备注</text>
            </div>
            <text class="post-purchase-button" onclick="retryActivation">我已完成购买，开始验证</text>
            <text class="debug-button" onclick="handleClearAllCache">清除所有缓存并重置</text>
        </scroll>
    </div>
</div>
</template>
  
<style>
    /* --- 基础容器样式 --- */
    .splash-container { width: 100%; height: 100%; flex-direction: column; align-items: center; background-color: black; padding: 20px 0 60px 0; }
    .verifying-content { width: 100%; height: 100%; flex-direction: column; align-items: center; justify-content: center; background-color: #000; }
    .logo { width: 120px; height: 120px; }
    .app-name { font-size: 48px; font-weight: bold; color: #ffffff; margin-top: 20px; }
    .status-text { font-size: 24px; color: rgba(255, 255, 255, 0.6); margin-top: 15px; }
    .activation-content { width: 100%; height: 100%; flex-direction: column; align-items: center; background-color: #000; }
    .header { width: 100%; flex-direction: column; justify-content: center; align-items: center; margin-bottom: 5px; }
    .time-display { font-size: 28px; font-weight: bold; color: #ffffff; }
    .title { font-size: 32px; font-weight: bold; color: #fff; }
  
    /* --- 信息胶囊样式 --- */
    .info-capsule { width: 360px; background-color: rgba(255, 255, 255, 0.06); border-radius: 24px;margin-bottom: 20px; flex-direction: column; align-items: center; padding: 20px; }
    .capsule-title { font-size: 26px; font-weight: bold; color: #ffffff; margin-bottom: 15px; }
    .capsule-tip { font-size: 20px; color: rgba(255, 255, 255, 0.7); text-align: center; }
    
    /* --- 二维码样式 --- */
    .qrcode-component-large { width: 220px; height: 220px; background-color: #ffffff; padding: 10px; border-radius: 8px; margin-bottom: 15px; }
    .qrcode-component-small { width: 220px; height: 220px; background-color: #ffffff; padding: 10px; border-radius: 8px; margin-bottom: 15px;}
    
    .device-id-display { width: 100%; flex-direction: column; align-items: center; justify-content: center; margin-top: 10px; }
    .device-id-text-wrapper { flex: 1; flex-direction: column; }
  
    /* --- 底部按钮样式 --- */
    .post-purchase-button { font-size: 26px; color: #000000; background-color: #3ae1ff; padding: 15px 30px; border-radius: 50px; font-weight: bold; }
    .debug-button { font-size: 24px; color: #000; background-color: #fff; margin-top: 15px; margin-bottom: 60px; padding: 10px 20px; border-radius: 30px; }

    .eula-container { width: 100%; height: 100%; flex-direction: column; background-color: #000; padding: 30px; }
    .eula-title { font-size: 32px; font-weight: bold; color: #fff; text-align: center; margin-bottom: 20px; }
    .eula-text { font-size: 24px; padding: 10px 20px; background-color:rgba(255, 255, 255, 0.05);color: rgba(255, 255, 255, 0.8); border-radius: 36px;}
    .eula-footer { margin-top: 10px;flex-direction: column; align-items: center; }
    .eula-buttons { width: 100%; flex-direction: row; justify-content: space-around; margin-bottom: 10px; }
    .eula-button-disagree, .eula-button-agree, .eula-button-agree-active { height: 80px; border-radius: 40px; text-align: center; font-size: 28px; font-weight: bold; padding: 0 40px;}
    .eula-button-disagree { background-color: rgba(255, 255, 255, 0.1); color: #fff; }
    .eula-button-agree { background-color: #555; color: #999; /* 未激活状态 */ }
    .eula-button-agree-active { background-color: #3ae1ff; color: #000; /* 激活状态 */ }
    .eula-tip { font-size: 18px; color: rgba(255, 255, 255, 0.5); }
  
    @media screen and (shape: rect) {
        .header { padding-top: 10px; flex-direction: row-reverse; justify-content:space-around; }
        .time-display { font-size: 32px; }
        .debug-button { margin-bottom: 20px; }
    }
    @media screen and (shape: circle) {
        .eula-container{
            padding:45px 0 80px 0;
        }
        .eula-text{
            margin: 0 40px;
        }
        .eula-buttons{
            flex-direction: column;
            width: 360px;
        }
        .eula-button-disagree, .eula-button-agree, .eula-button-agree-active {
        margin:5px;}
    }
</style>
  
<script>
    import router from '@system.router';
    import prompt from '@system.prompt';
    import fetch from '@system.fetch';
    import file from '@system.file';
    import device from '@system.device';
    import app from '@system.app'; // 新增：用于退出应用

    const LICENSE_FILE_URI = 'internal://files/license.json';
    const PROFILE_FILE_URI = 'internal://files/user_profile.json';
    const AVATAR_CACHE_URI = 'internal://files/avatars/user_avatar.png';
    const COOKIE_FILE_URI = 'internal://files/cookie.txt';
    // ==================== 核心修改点 1 ====================
    // 使用统一的状态文件
    const STATUS_FILE_URI = 'internal://files/app_status.json';
    const ALL_CACHE_FILES = [LICENSE_FILE_URI, PROFILE_FILE_URI, AVATAR_CACHE_URI, COOKIE_FILE_URI, STATUS_FILE_URI];

    import eulaTextContent from '../../common/eula.json';
    
    export default {
        private: {
            // 新增 EULA 相关状态
            verificationState: 'verifying', // 初始状态保持不变，逻辑中会切换到 eula
            eulaText: '正在加载协议...',
            hasScrolledToEnd: false,
            isAgreeButtonActive: false,
            agreeButtonCountdown: 10,
            agreeButtonText: '同意并继续 (10s)',
            eulaTimer: null,

            // 原有状态
            deviceId: '获取中...',
            afdianPurchaseUrl: '',
            currentTime: '00:00',
            pollInterval: null,
            isLoading: false,
        },

        onInit() {
            this.initializeDataFiles(() => {
        console.log("Splash.onInit: 初始化 Splash 页面。");
        this.updateTime();
        setInterval(() => { this.updateTime(); }, 1000);
        setTimeout(() => {
            if (this.$app.$def.isActivated) {
                                router.replace({ uri: '/pages/player' });
                            }
                            else {
                                        
        // 核心流程修改：先检查 EULA，再决定后续流程
        this.checkEulaStatus();
                            }
        }, 500);
        })
    },

        // ==================== 最终修正点 1: 回归到回调函数模式 ====================
        checkEulaStatus() {
            file.readText({
                uri: STATUS_FILE_URI,
                success: (fileResult) => {
                    // 文件读取成功
                    let status = {};
                    try {
                        // 兼容性处理返回值
                        let fileText;
                        if (typeof fileResult === 'object' && fileResult.text) {
                            fileText = fileResult.text;
                        } else if (typeof fileResult === 'string') {
                            fileText = fileResult;
                        }

                        // 解析 JSON
                        if (fileText) {
                            status = JSON.parse(fileText);
                            console.log("成功读取并解析应用状态:", status);
                        } else {
                            // 文件为空，也视为未同意
                            status.eulaAgreed = false;
                        }

                    } catch (e) {
                        // JSON 解析失败，也视为未同意
                        console.warn("解析状态 JSON 失败:", e);
                        status.eulaAgreed = false;
                    }

                    // 根据最终解析出的状态决定流程
                    if (status.eulaAgreed === true) {
                        console.log("EULA 已同意，显示激活引导页。");
                        this.showFailedState();
                    } else {
                        console.log("EULA 未同意，显示协议页面。");
                        this.showEulaPage();
                    }
                },
                fail: (data, code) => {
                    // 文件读取失败 (通常是文件不存在)，直接视为未同意
                    console.warn(`读取状态文件失败 (code: ${code})，将视为首次启动。`);
                    this.showEulaPage();
                }
            });
        },




        // ==================== 核心修正点 2: 改造 showEulaPage 方法 ====================
        showEulaPage() {
            this.verificationState = 'eula';
            
            // 直接从导入的模块中赋值，无需异步和错误处理
            this.eulaText = eulaTextContent.text;
            
            // 启动10秒倒计时
            this.eulaTimer = setInterval(() => {
                if (this.agreeButtonCountdown > 0) {
                    this.agreeButtonCountdown--;
                    // 根据倒计时是否结束，更新按钮文本
                    if (this.agreeButtonCountdown > 0) {
                        this.agreeButtonText = `同意并继续 (${this.agreeButtonCountdown}s)`;
                    } else {
                        this.agreeButtonText = '同意并继续';
                    }
                }
                // 每次都检查是否满足最终激活条件
                this.checkIfCanAgree();
            }, 1000);
        },


        handleScrollEnd() {
            console.log("用户已滚动到底部。");
            this.hasScrolledToEnd = true;
            this.checkIfCanAgree();
        },

        checkIfCanAgree() {
            // 必须同时满足：滚动到底部 & 倒计时结束
            if (this.hasScrolledToEnd && this.agreeButtonCountdown === 0) {
                if (this.eulaTimer) clearInterval(this.eulaTimer);
                this.isAgreeButtonActive = true;
                console.log("同意按钮已激活。");
            }
        },

        handleAgree() {
            if (!this.isAgreeButtonActive) {
                prompt.showToast({ message: '为保障您的合法权益，请您仔细阅读，倒计时结束后方可同意' });
                return;
            }

            // 准备要写入的状态
            const newStatus = { eulaAgreed: true };

            // 使用回调方式写入文件
            file.writeText({
                uri: STATUS_FILE_URI,
                text: JSON.stringify(newStatus),
                success: () => {
                    // 写入成功后，显示激活引导页
                    console.log("EULA 同意状态已成功写入。");
                    this.showFailedState();
                },
                fail: (data, code) => {
                    // 写入失败
                    prompt.showToast({ message: '状态保存失败，请重试' });
                    console.error(`写入 EULA 状态失败 (code: ${code})`);
                }
            });
        },



        handleDisagree() {
            // 退出应用
            app.terminate();
        },
        
        // ===================================================================
        //  原有方法调整
        // ===================================================================
        startActivationFlow() {
            // 将原 onInit 中的激活逻辑移到这里
            this.verificationState = 'verifying'; // 确保UI是验证中
            this.pollInterval = setInterval(() => {
                const appDef = this.$app.$def;
                if (appDef.isActivated === true) {
                    clearInterval(this.pollInterval);
                    this.verificationState = 'verifying'; 
                    prompt.showToast({ message: '授权成功！即将进入应用...' });
                    setTimeout(() => {
                        router.replace({ uri: '/pages/player' });
                    }, 1500);
                } else if (appDef.isActivated === false) {
                    if (appDef.deviceId && this.verificationState !== 'failed') {
                        this.showFailedState();
                    }
                }
            }, 200);
        },

        onDestroy() {
            if (this.pollInterval) clearInterval(this.pollInterval);
            if (this.eulaTimer) clearInterval(this.eulaTimer); // 确保销毁 EULA 计时器
        },

        updateTime() {
            const now = new Date();
            const hours = now.getHours().toString().padStart(2, '0');
            const minutes = now.getMinutes().toString().padStart(2, '0');
            this.currentTime = `${hours}:${minutes}`;
        },

        showFailedState() {
            const appDef = this.$app.$def;
            this.deviceId = appDef.deviceId || 'ID获取失败,请重启应用';
            this.afdianPurchaseUrl = appDef.AFDIAN_PURCHASE_URL || 'https://afdian.com';
            this.verificationState = 'failed';
        },

    /**
     * @description
     * 检查并初始化应用所需的核心数据文件。
     * 如果文件不存在，则创建具有合适初始内容的文件。
     */
     initializeDataFiles(onComplete) {
        // **扩展文件列表和初始内容**
        const filesToEnsure = [
            { uri: 'internal://files/downloaded_songs.json', initialContent: '[]' },
            { uri: 'internal://files/play_list.json', initialContent: '[]' },
            { uri: 'internal://files/cookie.txt', initialContent: '' }, // Cookie文件初始为空字符串
            { uri: 'internal://files/user_profile.json', initialContent: '{}' } // 用户信息初始为空对象
        ];

        let filesChecked = 0;
        const totalFiles = filesToEnsure.length;

        if (totalFiles === 0) {
            if (onComplete) onComplete();
            return;
        }

        const checkCompletion = () => {
            filesChecked++;
            if (filesChecked === totalFiles && onComplete) {
                onComplete();
            }
        };

        console.log(`准备检查和初始化 ${totalFiles} 个核心数据文件...`);

        filesToEnsure.forEach(fileInfo => {
            file.access({
                uri: fileInfo.uri,
                success: () => {
                    console.log(`文件已存在: ${fileInfo.uri}`);
                    checkCompletion();
                },
                fail: () => {
                    console.log(`文件不存在，正在创建: ${fileInfo.uri}`);
                    file.writeText({
                        uri: fileInfo.uri,
                        text: fileInfo.initialContent, // **使用指定的初始内容**
                        encoding: 'UTF-8',
                        success: () => {
                            console.log(`文件创建成功: ${fileInfo.uri}`);
                            checkCompletion();
                        },
                        fail: (data, code) => {
                            console.error(`创建文件 ${fileInfo.uri} 失败, code = ${code}`);
                            checkCompletion(); // 即使失败也要继续，防止阻塞
                        }
                    });
                }
            });
        });
    },

// 在 splash.ux 中
retryActivation() {
    if (this.isLoading) {
        prompt.showToast({ message: '正在验证中，请稍候...' });
        return;
    }
    this.isLoading = true;
    this.verificationState = 'verifying';

    const appDef = this.$app.$def;
    const deviceId = appDef.deviceId;
    const serverUrl = appDef.ACTIVATION_SERVER_URL;
    const activateUrl = `${serverUrl}/activate`;
    const licenseUri = appDef.LICENSE_FILE_URI;

    if (!deviceId || !serverUrl || !licenseUri) {
        prompt.showToast({ message: '应用内部配置错误，请重启应用。' });
        this.showFailedState();
        this.isLoading = false;
        return;
    }

    prompt.showToast({ message: '正在收集设备信息...' });

    // ==================== 1. 保留设备信息收集逻辑 ====================
    // 使用 Promise.all + 回调来收集信息，以保证兼容性
    const p1 = new Promise(resolve => device.getInfo({ success: data => resolve({ status: 'fulfilled', value: data }), fail: (data, code) => resolve({ status: 'rejected', reason: `code ${code}` }) }));
    const p2 = new Promise(resolve => device.getSerial({ success: data => resolve({ status: 'fulfilled', value: data }), fail: (data, code) => resolve({ status: 'rejected', reason: `code ${code}` }) }));
    const p3 = new Promise(resolve => device.getTotalStorage({ success: data => resolve({ status: 'fulfilled', value: data }), fail: (data, code) => resolve({ status: 'rejected', reason: `code ${code}` }) }));

    // Promise.all 在 Vela 4 上是稳定可用的
    Promise.all([p1, p2, p3]).then(([infoResult, serialResult, storageResult]) => {
        // 组装包含所有设备信息的 postData
        const postData = {
            device_id: deviceId,
            deviceInfo: null,
            serial: null,
            totalStorage: null
        };
        if (infoResult.status === 'fulfilled') postData.deviceInfo = infoResult.value;
        if (serialResult.status === 'fulfilled') postData.serial = serialResult.value.serial;
        if (storageResult.status === 'fulfilled') postData.totalStorage = storageResult.value.totalStorage;

        prompt.showToast({ message: '信息收集完毕，正在发送验证...' });

        // ==================== 2. 发送包含完整信息的网络请求 ====================
        fetch.fetch({
            url: activateUrl,
            method: 'POST',
            header: { 'Content-Type': 'application/json' },
            data: postData, // 使用包含完整信息的 postData
            success: (response) => {
                if (response.code === 200 && response.data.status === 'success') {
                    prompt.showToast({ message: '已获取许可证，正在写入...' });
                    
                    file.writeText({
                        uri: licenseUri,
                        text: JSON.stringify(response.data.license),
                        success: () => {
                            prompt.showToast({ message: '写入成功，开始最终验证！' });

                            // ==================== 3. 使用定时器轮询等待验证结果 ====================
                            appDef.isActivated = null;
                            appDef.runActivationFlow();

                            let checkCount = 0;
                            const maxChecks = 50; // 5秒超时
                            const activationTimer = setInterval(() => {
                                checkCount++;
                                if (appDef.isActivated === true) {
                                    clearInterval(activationTimer);
                                    this.isLoading = false;
                                    prompt.showToast({ message: '授权成功！即将进入应用...' });
                                    setTimeout(() => {
                                        router.replace({ uri: '/pages/player' });
                                    }, 1500);
                                } else if (appDef.isActivated === false || checkCount >= maxChecks) {
                                    clearInterval(activationTimer);
                                    this.isLoading = false;
                                    prompt.showToast({ message: '最终验证失败，请重试。' });
                                    this.showFailedState();
                                }
                            }, 100);
                        },
                        fail: (data, code) => {
                            prompt.showToast({ message: '关键文件写入失败，请检查存储权限。' });
                            this.showFailedState();
                            this.isLoading = false;
                        }
                    });
                } else {
                    const serverMessage = (response.data && response.data.message) || '服务器返回了未知错误。';
                    prompt.showToast({ message: `激活失败: ${serverMessage}` });
                    this.showFailedState();
                    this.isLoading = false;
                }
            },
            fail: (data, code) => {
                prompt.showToast({ message: '网络连接失败，请检查网络后重试。' });
                this.showFailedState();
                this.isLoading = false;
            }
        });
    });
},

        handleClearAllCache() {
            // ... 此方法无需修改，保持原样 ...
            prompt.showDialog({
                title: '彻底重置',
                message: '此操作将删除所有本地缓存，包括登录信息、激活状态和协议同意记录，用于解决疑难问题。确定要继续吗？',
                buttons: [{ text: '取消' }, { text: '确定', color: '#FF453A' }],
                success: () => {
                    prompt.showToast({ message: '正在清除所有缓存...' });
                    let deletedCount = 0;
                    const totalFiles = ALL_CACHE_FILES.length;

                    const onFileDelete = () => {
                        deletedCount++;
                        if (deletedCount >= totalFiles) {
                            if (this.$app.$def) {
                                this.$app.$def.isActivated = false;
                                this.$app.$def.deviceId = null;
                                if (this.$app.$def.cookieService) this.$app.$def.cookieService.cookie = null;
                            }
                            prompt.showToast({ message: '所有缓存已清除！应用将重新检查协议。' });
                            
                            // 重置后，重新执行 EULA 检查流程
                            this.hasScrolledToEnd = false;
                            this.isAgreeButtonActive = false;
                            this.agreeButtonCountdown = 10;
                            this.checkEulaStatus();
                        }
                    };

                    if (totalFiles > 0) {
                        ALL_CACHE_FILES.forEach(uri => {
                            file.delete({ uri: uri, complete: onFileDelete });
                        });
                    } else {
                        onFileDelete();
                    }
                },
                cancel: () => {
                    prompt.showToast({ message: '操作已取消' });
                }
            });
        },
        back(){
            app.terminate()
        }
    };
</script>
