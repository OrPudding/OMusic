<template>
	<div class="demo-page">
		<!-- 歌曲信息 -->
		<div class="song">
			<marquee class="song-name" scrollamount="36">
				{{ songName }}
			</marquee>
			<marquee class="singer-name" scrollamount="36">
				{{ songArtists }}
			</marquee>
		</div>

		<!-- 播放控制按钮 (未展开时显示) -->
		<div class="controls" if="{{ !expend }}">
			<image class="icon" src="/common/icon/prev.png" onclick="change(-1)" />
			<image
				class="icon"
				src="{{ playButtonIcon }}"
				onclick="playOrPause"
			/>
			<image class="icon" src="/common/icon/next.png" onclick="change(1)" />
		</div>

        <!-- 歌词容器 -->
        <div class="{{ expend ? 'lyrics-container-expended' : 'lyrics-container' }}" onclick="toggleLyricExpend">
            <!-- 使用 for 循环动态渲染歌词行，代码更简洁 -->
            <text
                for="{{ line in visibleLyrics }}"
                class="{{ line.className }}"
            >
                {{ line.text }}
            </text>
        </div>

		<!-- 播放进度 (未展开时显示) -->
		<div class="progress" if="{{ !expend }}">
			<text class="play-time">{{ progressText }}</text>
<slider
    class="play-progress"
    min="0"
    max="{{ (currSong && currSong.duration) ? currSong.duration : 100 }}"
    step="1"
    value="{{ playerState.playDuration }}"
    onchange="onSliderChange"
></slider>

		</div>

		<!-- 底部操作 (未展开时显示) -->
		<div class="footer" if="{{ !expend }}">
		    <div class="footer-content-rect" if="{{ screenShape === 'rect' }}">
                <image class="footer-icon" src="/common/icon/volume.png" onclick="goToSongActions"></image>
                <image class="footer-icon" src="{{ downloadIcon }}" onclick="initiateDownload"></image>
                <image class="footer-icon" src="{{ playModeIcon }}" onclick="togglePlayMode"></image>
                <image class="footer-icon" src="/common/icon/play-list.png" onclick="goToMenu"></image>
            </div>
        
            <!-- 圆屏 (circle) 或其他布局：只显示音量和列表两个按钮 -->
            <div class="footer-content-circle" else>
                <image class="footer-icon" src="/common/icon/volume.png" onclick="goToSongActions"></image>
                <image class="footer-icon" src="/common/icon/play-list.png" onclick="goToMenu"></image>
            </div>
		</div>
	</div>
</template>
<script>
import router from "@system.router";
import fetch from "@system.fetch";
import audio, { src } from "@system.audio";
import file from "@system.file";
import prompt from '@system.prompt';
import request from '@system.request';
import device from '@system.device';

// --- 1. 常量定义 ---
const CONSTANTS = {
    API_SONG_URL: 'https://163api.qijieya.cn/song/url?br=64000&id=',
    API_LYRIC_URL: 'https://163api.qijieya.cn/lyric?id=',
    API_DOWNLOAD_SONG_URL: 'https://163api.qijieya.cn/song/url?br=128000&id=',
    DIR_MUSIC: 'internal://files/music/',
    DIR_LYRICS: 'internal://files/lyrics/',
    FILE_PLAY_LIST: 'internal://files/play_list.json',
    FILE_DOWNLOADED_SONGS: 'internal://files/downloaded_songs.json',
    SETTINGS_FILE_URI: 'internal://files/settings.json',
    COOKIE_FILE_URI: 'internal://files/cookie.txt',
    FILE_PLAYER_STATE: 'internal://files/player_state.json',
    MAX_PLAYBACK_RETRIES: 3,
};

// 文件服务封装 (无变化 )
const fileService = {
    _promisify(fn, options) {
        return new Promise((resolve, reject) => {
            fn({ ...options, success: resolve, fail: (data, code) => reject({ data, code }) });
        });
    },
    async readJson(uri, defaultValue = null) {
        try {
            const data = await this._promisify(file.readText, { uri });
            return JSON.parse(data.text);
        } catch (e) { return defaultValue; }
    },
    async writeJson(uri, data) {
        try {
            await this._promisify(file.writeText, { uri, text: JSON.stringify(data, null, 2) });
            return true;
        } catch (e) { return false; }
    },
};

export default {
    private: {
        playerState: { isPlaying: false, playDuration: 0, currentLyricIndex: 0, lyricType: 'chinese' },
        currSong: null,
        lyrics: [],
        expend: false,
        downloadedSongs: {},
        settings: { lyrics: { japaneseMode: 'translation', cantoneseMode: 'romaji', 
        englishMode: 'translation' } },
        cookie: null,
        isDownloadingLocked: false,
        isChangingSong: false,
        wasRestored: false,
        retryCount: 0,
        isEnding: false,
        screenShape: 'circle',
        playMode: 0,
        songBeingDownloaded: null,
    },

    protected: {
        playList: [],
        currentIndex: 0,
        songId: null,
        songInfo: null,
        triggerDownload: false,
        triggerPlayModeToggle: false,
    },

    computed: {
        songName() { return this.currSong ? this.currSong.name : "未知歌曲"; },
        songArtists() { return this.currSong ? this.currSong.artists : "未知艺术家"; },
        playButtonIcon() { return this.playerState.isPlaying ? '/common/icon/pause.png' : '/common/icon/play.png'; },
        progressText() {
            const duration = this.currSong?.duration || 0;
            return `${this.second2time(this.playerState.playDuration)}/${this.second2time(duration)}`;
        },
        downloadIcon() {
        const icons = {
            downloading: '/common/icon/downloading.png', // 假设您有这个图标
            downloaded: '/common/icon/downloaded.png',
            not_downloaded: '/common/icon/download.png',
        };
        
        if (!this.currSong) {
            return icons.not_downloaded;
        }

        // 检查下载任务是否正在进行
        if (this.isDownloadingLocked && this.currSong.id === (this.songBeingDownloaded?.id)) {
             return icons.downloading;
        }

        // 检查歌曲是否已在下载列表中
        if (this.downloadedSongs[this.currSong.id]) {
            return icons.downloaded;
        }

        return icons.not_downloaded;
    },

    playModeIcon() {
        const icons = [
            '/common/icon/loop.png',
            '/common/icon/single-loop.png',
            '/common/icon/random.png'
        ];
        return icons[this.playMode] || icons[0];
    },

        /**
          实现智能歌词显示逻辑
         */
         visibleLyrics() {
        if (!this.lyrics || this.lyrics.length === 0) {
            return [{ text: '暂无歌词', className: 'lyric-line current-lyric' }];
        }

        const lines = [];
        const currentLineData = this.lyrics[this.playerState.currentLyricIndex];
        if (!currentLineData) {
            return [{ text: '歌词加载中...', className: 'lyric-line current-lyric' }];
        }

        // --- 1. 展开状态 (逻辑不变) ---
        if (this.expend) {
            const offsets = [-2, -1, 0, 1, 2, 3, 4];
            for (const offset of offsets) {
                const index = this.playerState.currentLyricIndex + offset;
                if (index >= 0 && index < this.lyrics.length) {
                    const lineData = this.lyrics[index];
                    const isCurrent = offset === 0;
                    
                    lines.push({ 
                        text: lineData.original || lineData.text || '', 
                        className: `lyric-line ${isCurrent ? 'current-lyric' : 'secondary-lyric'}` 
                    });

                    if (isCurrent) {
                        const extraText = this.getExtraLyricText(lineData);
                        if (extraText) {
                            lines.push({ text: extraText, className: 'lyric-line extra-lyric' });
                        }
                    }
                }
            }
            return lines;
        }

        // --- 2. 未展开状态 (全新智能逻辑) ---
        
        const extraText = this.getExtraLyricText(currentLineData);
        const shouldShowExtra = !!extraText;

        // a) 如果是中文歌，或外文歌设置为"仅原文"，则进入此分支
        if (!shouldShowExtra) {
            // **核心修改点：根据屏幕形状决定显示的行数**
            const offsets = this.screenShape === 'rect' 
                ? [-2, -1, 0, 1, 2]  // 方屏：显示5行
                : [-1, 0, 1];        // 其他屏幕 (如圆形)：显示3行

            for (const offset of offsets) {
                const index = this.playerState.currentLyricIndex + offset;
                if (index >= 0 && index < this.lyrics.length) {
                    const lineData = this.lyrics[index];
                    const isCurrent = offset === 0;
                    lines.push({
                        text: lineData.original || lineData.text || '',
                        className: `lyric-line ${isCurrent ? 'current-lyric' : 'secondary-lyric'}`
                    });
                }
            }
        } 
        // b) 如果需要显示翻译或罗马音，则只显示当前行和附加行 (逻辑不变)
        else {
            lines.push({
                text: currentLineData.original || currentLineData.text || '',
                className: 'lyric-line current-lyric'
            });
            lines.push({
                text: extraText,
                className: 'lyric-line extra-lyric'
            });
        }
        
        return lines;
    }
    },

// player.ux -> onInit
async onInit() {
    if (this.$app.$def.isActivated === false) {
        console.warn("Page Guard: 未授权，强制跳转到 Splash 页面。");
        router.replace({ uri: '/pages/splash' });
        return;
    }
    console.log("Player onInit: 页面实例创建。");
    this.bindAudioEvents();
    await this.loadSettings();
    await this.loadCookie();
    await this.loadDownloadedSongs();
    this.getDeviceInfo();
    
    // 状态恢复逻辑保持不变，这能让用户直接打开时看到上次的歌曲信息
    this.wasRestored = await this.onRestoreState();
    
    // 核心修改：移除 onInit 中解析 songInfo 和 songId 的逻辑
    // 这些现在完全交给 onRefresh 处理
    if (!this.wasRestored) {
        console.log("未恢复状态，执行标准初始化流程...");
        await this.loadListFromFile();
    }
},

// player.ux -> onReady
onReady() {
    console.log("Player onReady.");
    // 核心修改：移除对 startLogic() 的调用。
    // 页面就绪后，不再自动播放。
    // 如果状态被恢复，UI会显示歌曲信息，等待用户交互。
},
    
    async onShow() {
        console.log("Player onShow: 页面显示，同步数据。");
        await this.loadDownloadedSongs();
        await this.loadListFromFile();
        if (this.currSong) {
            const stillInPlaylist = this.playList.some(song => song.id === this.currSong.id);
            if (!stillInPlaylist) {
                prompt.showToast({ message: "当前歌曲已从列表中移除" });
                this.change(1); 
            }
        }
    },

// player.ux -> onRefresh
async onRefresh(query) {
    console.log('Player onRefresh with params:', JSON.stringify(query));
    if (this.isDownloadingLocked) {
        prompt.showToast({ message: '正在下载，请稍后操作' });
        return;
    }
    if (query && query.triggerDownload) {
        await this.loadDownloadedSongs();
        this.initiateDownload();
        return;
    }
        // 核心修改：如果有 triggerPlayModeToggle，先切换播放模式
        if (query && query.triggerPlayModeToggle) {
            this.togglePlayMode();
        }

    // 核心修改：这里是“点击播放”场景的唯一入口
    if (query && query.songId) {
        // 停止当前可能正在播放的音频，准备播放新的
        audio.stop();
        this.playerState.isPlaying = false;

        this.songId = query.songId;
        
        if (query.songInfo) {
            try { 
                this.songInfo = JSON.parse(query.songInfo); 
            } catch(e) { 
                console.error("解析 onRefresh 传入的 songInfo 失败:", e);
                this.songInfo = null; 
            }
        } else {
            this.songInfo = null; 
            console.warn(`onRefresh 调用缺少 songInfo 参数 for songId: ${this.songId}`);
        }

        // 调用 startLogic 开始获取 URL 并播放
        this.startLogic();
    }
},


    onHide() {
        console.log("Player onHide: 页面被隐藏。");
        if (!this.isDownloadingLocked) {
            this.onSaveState();
        } else {
            console.log("下载中，跳过状态保存。");
        }
    },

    onDestroy() {
        console.log("Player onDestroy: 页面被销毁。");
        audio.stop();
        if (!this.isDownloadingLocked) {
            this.onSaveState();
        }
    },

    onBackPress() {
        if (this.isDownloadingLocked) {
            prompt.showToast({ message: '正在下载，请勿退出' });
            return true;
        }
        this.onSaveState
        return false;
    },

// player.ux -> onSaveState
async onSaveState() {
    if (!this.currSong) return;
    
    // 核心修改：增加保存 audio.src
    const stateToSave = {
        lastSongId: this.currSong.id,
        lastPlayDuration: this.playerState.playDuration,
        playMode: this.playMode,
        src: audio.src, // 保存当前的播放链接
        timestamp: new Date().getTime(),
    };
    
    await fileService.writeJson(CONSTANTS.FILE_PLAYER_STATE, stateToSave);
    console.log(`播放器状态已保存: ${this.currSong.name} at ${this.playerState.playDuration.toFixed(2)}s`);
},
// player.ux -> onRestoreState
async onRestoreState() {
    const savedState = await fileService.readJson(CONSTANTS.FILE_PLAYER_STATE);
    // 增加一个时间戳检查，例如，超过12小时的状态就认为是过期的
    const isStateExpired = savedState?.timestamp ? (new Date().getTime() - savedState.timestamp > 12 * 3600 * 1000) : true;

    if (savedState && savedState.lastSongId && !isStateExpired) {
        console.log("检测到有效的播放器状态，正在恢复...");
        
        this.playMode = savedState.playMode || 0;
        await this.loadListFromFile();

        if (this.playMode === 2) {
            this.generateShuffledList(false);
        }

        const lastIndex = this.playList.findIndex(song => song.id === savedState.lastSongId);
        if (lastIndex > -1) {
            this.currentIndex = lastIndex;
            if (this.playMode === 2) {
                const shuffledIdx = this.shuffledPlayList.indexOf(this.currentIndex);
                if (shuffledIdx > -1) this.shuffledIndex = shuffledIdx;
            }
            
            const song = this.playList[this.currentIndex];
            this.currSong = song;
            
            // 核心逻辑修正
            const downloadedInfo = this.downloadedSongs[song.id];
            const isLocal = !!downloadedInfo?.localUri;
            const savedSrc = savedState.src;

            // 场景1：如果是本地文件，则恢复播放进度
            if (isLocal) {
                console.log("恢复本地歌曲状态...");
                this.currSong = { ...song, ...downloadedInfo };
                audio.oncanplay = () => {
                    console.log("oncanplay (local): 设置 currentTime:", savedState.lastPlayDuration);
                    audio.currentTime = savedState.lastPlayDuration;
                    this.playerState.playDuration = savedState.lastPlayDuration;
                    this.updateLyric();
                    audio.oncanplay = null;
                };
                audio.src = downloadedInfo.localUri;
                this.fetchLyric(song.id);
                prompt.showToast({ message: "播放状态已恢复" });
                return true;
            }
            
            // 场景2：如果是网络歌曲，只恢复UI，不设置src，不播放
            console.log("恢复网络歌曲UI，但不自动播放。");
            this.fetchLyric(song.id); // 只加载歌词
            this.playerState.playDuration = savedState.lastPlayDuration; // 恢复进度条UI
            // **关键**：不设置 audio.src，不设置 audio.currentTime
            // 这样 togglePlay 在用户点击时会触发 startLogic 重新获取链接
            
            return true;
        }
    }
    
    if (isStateExpired) console.log("播放状态已过期。");
    else console.log("无有效状态可恢复。");
    
    return false;
},



    // 新增：获取设备信息的方法
getDeviceInfo() {
    device.getInfo({
        success: (data) => {
            if (data.screenShape) {
                console.log(`设备屏幕形状: ${data.screenShape}`);
                this.screenShape = data.screenShape;
            }
        },
        fail: (data, code) => {
            console.error(`获取设备信息失败, code = ${code}`);
        }
    });
},


// player.ux -> startLogic
async startLogic() {
    await this.loadListFromFile();
    await this.loadDownloadedSongs();

    if (this.songId) {
        const index = this.playList.findIndex(item => item && item.id == this.songId);

        if (index !== -1) {
            this.currentIndex = index;
        } else {
            if (this.songInfo && this.songInfo.id) {
                console.log("歌曲不在列表中，使用传入的 songInfo 添加到列表首位。");
                this.playList.unshift(this.songInfo);
                this.currentIndex = 0;
                await fileService.writeJson(CONSTANTS.FILE_PLAY_LIST, this.playList);
                
                // --- 核心修改：列表变更后，如果是随机模式，重新生成随机列表 ---
                if (this.playMode === 2) {
                    this.generateShuffledList(true);
                }
            } else {
                prompt.showToast({ message: '歌曲信息不完整，已为您播放第一首' });
                this.currentIndex = 0;
            }
        }
    } else {
        this.currentIndex = 0;
    }

    if (!this.playList || this.playList.length === 0) {
        prompt.showToast({ message: '播放列表为空' });
        return;
    }

    this.playCurrent();
},


    /**
     * **新增**: 辅助方法，用于获取附加歌词文本
     * @param {object} lineData - 当前歌词行的数据对象
     * @returns {string} - 附加歌词文本，如果没有则返回空字符串
     */
// player.ux -> getExtraLyricText()
getExtraLyricText(lineData) {
    if (!lineData) return '';
    let extraText = '';

    // 确保 settings.lyrics 存在，避免出错
    const lyricSettings = this.settings.lyrics || {};

    switch (this.playerState.lyricType) {
        case 'japanese':
            if (lyricSettings.japaneseMode === 'translation') {
                extraText = lineData.translation || '';
            } else if (lyricSettings.japaneseMode === 'romaji') {
                extraText = lineData.romaji || '';
            }
            break;
        
        // --- 核心修改：新增对 cantonese 类型的处理 ---
        case 'cantonese':
            if (lyricSettings.cantoneseMode === 'romaji') {
                extraText = lineData.romaji || '';
            }
            break;

        case 'english':
            if (lyricSettings.englishMode === 'translation') {
                extraText = lineData.translation || '';
            }
            break;
    }
    
    return extraText;
},


    initiateDownload() {
        if (!this.currSong) { prompt.showToast({ message: '歌曲信息无效，无法下载' }); return; }
        if (this.downloadedSongs[this.currSong.id]) { prompt.showToast({ message: '歌曲已下载' }); return; }
        if (this.isDownloadingLocked) { prompt.showToast({ message: '已有任务在下载中' }); return; }
        this.executeDownload();
    },

    async executeDownload() {
        this.isDownloadingLocked = true;
        const song = this.currSong;
        prompt.showToast({ message: `开始下载: ${song.name}` });
        try {
            const { songInfo, lyricData } = await this.fetchSongAndLyricForDownload(song.id);
            if (!songInfo || !songInfo.url) throw new Error('无法获取歌曲下载信息');
            const lyricFilePath = `${CONSTANTS.DIR_LYRICS}${song.id}.json`;
            const songFilePath = `${CONSTANTS.DIR_MUSIC}${song.id}.mp3`;
            if (lyricData) await this.saveLyricFile(lyricFilePath, lyricData);
            const tempFileUri = await this.downloadSongFile(songInfo.url, `${song.id}.mp3`);
            if (!tempFileUri) throw new Error('歌曲文件下载失败');
            await this.moveSongFile(tempFileUri, songFilePath);
            const downloadedInfo = { ...song, localUri: songFilePath, localLyricUri: lyricData ? lyricFilePath : null, duration: songInfo.duration };
            this.downloadedSongs[song.id] = downloadedInfo;
            await fileService.writeJson(CONSTANTS.FILE_DOWNLOADED_SONGS, this.downloadedSongs);
            prompt.showToast({ message: `${song.name} 下载成功`, duration: 5000 });
        } catch (error) {
            this.handleDownloadError(error.message);
            file.delete({ uri: `${CONSTANTS.DIR_LYRICS}${song.id}.json` });
        } finally {
            this.isDownloadingLocked = false;
        }
    },

    /**
     * **新增**: 统一构建带认证信息的URL
     * @param {string} baseUrl - 不带任何参数的基础URL
     * @returns {string} - 拼接了cookie参数（如果存在）的完整URL
     */
     buildAuthenticatedUrl(baseUrl) {
        if (this.cookie) {
            // 确保基础URL后面有 '?'
            const separator = baseUrl.includes('?') ? '&' : '?';
            return `${baseUrl}${separator}cookie=${encodeURIComponent(this.cookie)}`;
        }
        return baseUrl;
    },

    async fetchSongAndLyricForDownload(songId) {
        // **移除**: 不再需要构造 headers
        // const headers = this.cookie ? { 'Cookie': this.cookie } : {};

        // **修改**: 使用辅助函数构建URL
        const songUrl = this.buildAuthenticatedUrl(`${CONSTANTS.API_DOWNLOAD_SONG_URL}${songId}`);
        const lyricUrl = this.buildAuthenticatedUrl(`${CONSTANTS.API_LYRIC_URL}${songId}`);

        console.log("Downloading with URL:", songUrl); // 调试日志

        const fetchPromise = (url) => new Promise((resolve, reject) => {
            // **移除**: 不再传递 header
            fetch.fetch({ url, responseType: 'text', success: resolve, fail: (data, code) => reject({ data, code }) });
        });

        try {
            const [songRes, lyricRes] = await Promise.all([
                fetchPromise(songUrl),
                fetchPromise(lyricUrl).catch(() => null)
            ]);
            const songData = JSON.parse(songRes.data)?.data?.[0];
            if (songData && songData.url) {
                if (!songData.freeTrialInfo) prompt.showToast({ message: "Cookie有效，获取到完整音源！" });
                else prompt.showToast({ message: "Cookie可能无效，获取到试听音源。" });
                return {
                    songInfo: { url: songData.url, duration: Math.floor(songData.time / 1000) },
                    lyricData: lyricRes ? JSON.parse(lyricRes.data) : null
                };
            } else {
                throw new Error('解析歌曲URL失败');
            }
        } catch (error) {
            console.error("fetchSongAndLyricForDownload 失败:", error);
            throw new Error('获取下载资源失败');
        }
    },

    saveLyricFile(path, data) {
        return new Promise((resolve, reject) => {
            if (!data) { resolve(); return; }
            file.writeText({ uri: path, text: JSON.stringify(data, null, 2), success: resolve, fail: reject });
        });
    },

    downloadSongFile(url, filename) {
        return new Promise((resolve) => {
            // ==================== 核心修改点 1: 定义定时器变量 ====================
            let downloadToastInterval = null;

            request.download({
                url,
                filename,
                success: (task) => {
                    // ==================== 核心修改点 2: 下载开始，启动定时器 ====================
                    // 立即显示一次，然后每5秒显示一次
                    prompt.showToast({ message: '歌曲下载中' ,duration:500});
                    downloadToastInterval = setInterval(() => {
                        prompt.showToast({ message: '歌曲下载中' ,duration:500});
                    }, 5000); // 5000毫秒 = 5秒

                    // 监听下载完成事件
                    request.onDownloadComplete({
                        token: task.token,
                        success: (data) => {
                            // ==================== 核心修改点 3: 下载成功，清除定时器 ====================
                            if (downloadToastInterval) {
                                clearInterval(downloadToastInterval);
                            }
                            prompt.showToast({ message: '下载完成！' ,duration:5000});
                            resolve(data.uri); // 返回文件 URI
                        },
                        fail: () => {
                            // ==================== 核心修改点 4: 下载失败，清除定时器 ====================
                            if (downloadToastInterval) {
                                clearInterval(downloadToastInterval);
                            }
                            prompt.showToast({ message: '下载失败，请重试。' });
                            resolve(null); // 返回 null
                        },
                    });
                },
                fail: () => {
                    // 如果连 `request.download` 本身都失败了（例如URL无效），也要确保清理
                    // ==================== 核心修改点 5: 初始请求失败，也要清除定时器 ====================
                    if (downloadToastInterval) {
                        clearInterval(downloadToastInterval);
                    }
                    prompt.showToast({ message: '下载启动失败，请检查链接。' });
                    resolve(null); // 返回 null
                },
            });
        });
    },


    moveSongFile(srcUri, dstUri) {
        return new Promise((resolve, reject) => {
            file.move({ srcUri, dstUri, success: resolve, fail: reject });
        });
    },

    handleDownloadError(message) {
        prompt.showToast({ message: message || '下载失败' });
        this.isDownloadingLocked = false;
    },

    async playCurrent() {
        if (this.isChangingSong) return;
        if (!this.playList || this.playList.length === 0) { this.resetPlayer(); return; }
        
        this.isChangingSong = true;
        
        const song = this.playList[this.currentIndex];
        if (!song) {
            this.handlePlaybackError("无效的歌曲数据");
            return;
        }

        try {
            const downloadedInfo = this.downloadedSongs[song.id];
            if (downloadedInfo?.localUri) {
                await this.playLocal(song, downloadedInfo);
            } else {
                await this.playOnline(song);
            }
        } catch (error) {
            this.handlePlaybackError(error.message || "播放准备失败");
        }
    },

    async playLocal(song, downloadedInfo) {
        return new Promise((resolve, reject) => {
            file.access({
                uri: downloadedInfo.localUri,
                success: () => {
                    this.startPlayback({ ...song, ...downloadedInfo }, downloadedInfo.localUri);
                    this.fetchLyric(song.id);
                    resolve();
                },
                fail: () => {
                    prompt.showToast({ message: '本地文件失效，转为在线播放' });
                    this.playOnline(song).then(resolve).catch(reject);
                }
            });
        });
    },

    async playOnline(song) {
        this.isEnding = false;
        try {
            // **修改**: 使用辅助函数构建URL
            const url = this.buildAuthenticatedUrl(`${CONSTANTS.API_SONG_URL}${song.id}`);
            console.log("Playing online with URL:", url); // 调试日志

            const response = await new Promise((resolve, reject) => {
                // **移除**: 不再传递 header
                fetch.fetch({ url, responseType: 'text', success: resolve, fail: (data, code) => reject({ data, code }) });
            });

            const songData = JSON.parse(response.data)?.data?.[0];
            if (songData?.url) {
                const songInfo = { ...song, playUrl: songData.url, duration: Math.floor(songData.time / 1000) };
                this.startPlayback(songInfo, songData.url);
                // fetchLyricOnline 内部也会使用新的URL构建方式
                this.fetchLyricOnline(song.id);
            } else {
                throw new Error('获取播放链接失败');
            }
        } catch (error) {
            console.error("playOnline 失败:", error);
            throw error;
        }
    },
    
    startPlayback(song, src) {
        this.isEnding = false;
        if (!src || typeof src !== 'string') {
            console.error("无效的播放源(src)，播放被中止。");
            this.handlePlaybackError("无效的播放源");
            return;
        }
        console.log("开始播放:", src);
        this.currSong = song;
        this.retryCount = 0;
        audio.stop();
        audio.src = src;
        audio.play();
    },

    playOrPause() {
        if (!this.currSong) {
        prompt.showToast({ message: '没有可播放的歌曲' });
        return;
    }

    // --- 核心修正点 ---
    // 检查 audio.src 是否为空。如果为空，说明是状态恢复后首次点击播放。
    if (!audio.src) {
        console.log("首次播放（或状态恢复后播放），调用 startLogic 获取播放链接。");
        // 调用 startLogic 会获取有效的 src 并自动开始播放。
        this.startLogic(); 
        return; // 立即返回，因为 startLogic 会处理后续的播放状态
    }
        if (!this.currSong || this.isChangingSong) return;
        this.playerState.isPlaying ? audio.pause() : audio.play();
    },

    change(dir) {
    if (this.isChangingSong) {
        prompt.showToast({ message: '正在切歌...' });
        return;
    }
    if (!this.playList || this.playList.length === 0) return;

    if (this.playList.length === 1) {
        prompt.showToast({ message: '单曲循环' });
        this.playCurrent();
        return;
    }

    switch (this.playMode) {
        case 0: // 列表循环
        case 1: // 单曲循环（切歌时表现同列表循环）
            this.currentIndex = (this.currentIndex + dir + this.playList.length) % this.playList.length;
            break;
        case 2: // 随机播放
            this.shuffledIndex = (this.shuffledIndex + dir + this.shuffledPlayList.length) % this.shuffledPlayList.length;
            this.currentIndex = this.shuffledPlayList[this.shuffledIndex];
            break;
    }
    
    this.playCurrent();
},

    onSliderChange(e) {
        if (this.playerState.isPlaying || audio.duration > 0) {
            audio.currentTime = e.progress;
            this.updateLyric();
        }
    },

    toggleLyricExpend() { this.expend = !this.expend; },

    goToSongActions() {
        if (!this.currSong) { prompt.showToast({ message: '当前无播放歌曲' }); return; }
        router.push({ 
            uri: "/pages/volume", 
            params: { 
                currentSong: JSON.stringify(this.currSong),
                // 新增：传递屏幕形状信息
                screenShape: this.screenShape,
                playMode: this.playMode
            } 
        });
    },

    togglePlayMode() {
        this.playMode = (this.playMode + 1) % 3;
        const modeText = ['列表循环', '单曲循环', '随机播放'];
        prompt.showToast({ message: modeText[this.playMode] });

        if (this.playMode === 2) {
            this.generateShuffledList(true); // 切换到随机模式时，立即生成并定位
        }
    },

    // --- 核心修改：新增生成随机列表的方法 ---
    generateShuffledList(locateCurrent = true) {
        console.log("生成新的随机播放列表...");
        this.shuffledPlayList = Array.from(this.playList.keys());
        
        for (let i = this.shuffledPlayList.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.shuffledPlayList[i], this.shuffledPlayList[j]] = [this.shuffledPlayList[j], this.shuffledPlayList[i]];
        }

        if (locateCurrent) {
            const currentShuffledIndex = this.shuffledPlayList.indexOf(this.currentIndex);
            this.shuffledIndex = (currentShuffledIndex !== -1) ? currentShuffledIndex : 0;
        }
        console.log("随机列表已生成, 当前随机索引:", this.shuffledIndex);
    },

    goToMenu() {
        if (this.isDownloadingLocked) { prompt.showToast({ message: '正在下载，请稍后' }); return; }
        router.push({ uri: "/pages/menu" });
    },

    fetchLyric(songId) {
        this.resetLyrics();
        const downloadedInfo = this.downloadedSongs[songId];
        if (downloadedInfo?.localLyricUri) this.loadLyricFromFile(downloadedInfo.localLyricUri, songId);
        else this.fetchLyricOnline(songId);
    },

    loadLyricFromFile(uri, songId) {
        file.readText({
            uri: uri,
            success: (data) => { try { this.processAndMergeLyrics(JSON.parse(data.text)); } catch (e) { this.fetchLyricOnline(songId); } },
            fail: () => this.fetchLyricOnline(songId)
        });
    },

    async fetchLyricOnline(songId) {
        try {
            // **修改**: 使用辅助函数构建URL
            const url = this.buildAuthenticatedUrl(`${CONSTANTS.API_LYRIC_URL}${songId}`);
            console.log("Fetching lyric with URL:", url); // 调试日志

            const response = await new Promise((resolve, reject) => {
                // **移除**: 不再传递 header
                fetch.fetch({ url, responseType: 'text', success: resolve, fail: (data, code) => reject({ data, code }) });
            });
            this.processAndMergeLyrics(JSON.parse(response.data));
        } catch (error) { 
            this.lyrics = [{ time: 0, text: '歌词加载失败' }]; 
        }
    },

        processAndMergeLyrics(data) {
        if (!data?.lrc?.lyric) { this.lyrics = [{ time: 0, text: '暂无歌词' }]; return; }
        const original = this.parseLyric(data.lrc.lyric);
        const translation = data.tlyric?.lyric ? this.parseLyric(data.tlyric.lyric) : null;
        const romaji = data.romalrc?.lyric ? this.parseLyric(data.romalrc.lyric) : null;
        this.mergeLyrics(original, translation, romaji);
    },

    parseLyric(lrcString) {
        const lines = lrcString.split('\n'), result = [], timeRegex = /\[(\d{2}):(\d{2})\.(\d{2,3})\]/;
        for (const line of lines) {
            const match = timeRegex.exec(line);
            if (match) {
                const time = parseInt(match[1]) * 60 + parseInt(match[2]) + parseInt(match[3].padEnd(3, '0')) / 1000;
                const text = line.replace(timeRegex, '').trim();
                if (text) result.push({ time, text });
            }
        }
        return result;
    },

// player.ux -> mergeLyrics()
mergeLyrics(original, translation, romaji) {
    const createMap = (arr) => new Map(arr.map(item => [item.time.toFixed(3), item.text]));
    
    if (romaji && translation) {
        this.playerState.lyricType = 'japanese';
        const transMap = createMap(translation), romaMap = createMap(romaji);
        this.lyrics = original.map(line => ({ time: line.time, original: line.text, translation: transMap.get(line.time.toFixed(3)), romaji: romaMap.get(line.time.toFixed(3)) }));
    } 
    // --- 核心修改：新增对“仅罗马音”情况的处理 ---
    else if (romaji && !translation) {
        this.playerState.lyricType = 'cantonese'; // 识别为粤语类型
        const romaMap = createMap(romaji);
        this.lyrics = original.map(line => ({ time: line.time, original: line.text, romaji: romaMap.get(line.time.toFixed(3)) }));
    }
    else if (translation) {
        this.playerState.lyricType = 'english';
        const transMap = createMap(translation);
        this.lyrics = original.map(line => ({ time: line.time, original: line.text, translation: transMap.get(line.time.toFixed(3)) }));
    } else {
        this.playerState.lyricType = 'chinese';
        this.lyrics = original.map(line => ({ time: line.time, original: line.text }));
    }

    if (this.lyrics.length === 0) this.lyrics = [{ time: 0, text: '暂无歌词' }];
},


    updateLyric() {
        if (!this.lyrics || this.lyrics.length === 0) return;
        const currentTime = this.playerState.playDuration;
        let newIndex = this.lyrics.findIndex(line => line.time > currentTime);
        if (newIndex === -1) newIndex = this.lyrics.length;
        const finalIndex = Math.max(0, newIndex - 1);
        if (finalIndex !== this.playerState.currentLyricIndex) this.playerState.currentLyricIndex = finalIndex;
    },

// player.ux -> bindAudioEvents
bindAudioEvents() {
    audio.onplay = () => {
        this.playerState.isPlaying = true;
        this.isChangingSong = false;
        this.isEnding = false; // 每次开始播放时，重置准备切歌的状态
        console.log("Event: onplay, isChangingSong and isEnding set to false.");
    };

    audio.onpause = () => {
        this.playerState.isPlaying = false;
    };

    audio.onstop = () => {
        this.playerState.isPlaying = false;
        this.isChangingSong = false;
        this.isEnding = false; // 停止时也重置状态
        console.log("Event: onstop, isChangingSong and isEnding set to false.");
    };

    audio.ontimeupdate = () => {
        // 优先处理“即将结束并切歌”的逻辑
        // 当 isEnding 为 true 且时间到达歌曲末尾（误差1秒内）时执行
        if (this.isEnding && audio.duration > 0 && audio.currentTime >= audio.duration - 1) {
            console.log(`ontimeupdate: Reached end of track (currentTime: ${audio.currentTime}). Changing song now.`);
            this.isEnding = false; // 切歌前重置标志位，防止重复触发
            
            // 根据播放模式决定行为
            if (this.playMode === 1) { // 单曲循环
                this.playCurrent();
            } else {
                this.change(1);
            }
            this.playerState.playDuration = audio.currentTime;
            this.updateLyric();
            return; // 退出，避免执行下面的歌词更新
        }

        // 原有的歌词更新逻辑
        if (!this.isChangingSong) {
            this.playerState.playDuration = audio.currentTime;
            this.updateLyric();
        }
    };

    // 核心修改：应用您提供的 onended bug 修复逻辑
    audio.onended = () => {
        console.log(`Event: onended triggered. CurrentTime: ${audio.currentTime}, Duration: ${audio.duration}`);

        // 检查是否在正常时间（最后1秒内）触发
        if (audio.duration > 0 && audio.currentTime >= audio.duration - 1) {
            console.log("onended: Playback complete. Changing song directly.");
            
            // 根据播放模式决定行为
            if (this.playMode === 1) { // 单曲循环
                this.playCurrent();
            } else {
                this.change(1);
            }
        } else {
            // 如果是提前触发，则设置标志位，等待 ontimeupdate 来完成切歌
            console.warn("onended: Triggered prematurely. Setting isEnding flag to true.");
            // 您可以保留或移除这个 toast，用于调试
            console.error("onended: Triggered prematurely. Setting isEnding flag to true.");
            console.error("fuck xiaomi's stupid audio.onended")
            prompt.showToast({message:"rw5设备,修正提前切歌"});
            this.isEnding = true;
        }
    };

    audio.onerror = () => {
        console.error("Audio player error occurred.");
        this.isEnding = false; // 发生错误时也应重置状态
        this.handlePlaybackError("播放器发生错误");
    };
},



    async loadSettings() {
        try {
            const data = await fileService.readJson(CONSTANTS.SETTINGS_FILE_URI);
            if (data) {
                this.settings = { ...this.settings, ...data, lyrics: { ...this.settings.lyrics, ...(data.lyrics || {}) } };
            }
        } catch (e) { console.log("无法加载播放器设置，使用默认值。"); }
    },


    async loadCookie() {
        try {
            
            let rawText;
            try {
                rawText = (await fileService._promisify(file.readText, { uri: CONSTANTS.COOKIE_FILE_URI })).text;
            } catch(e) {
                rawText = null;
            }

            this.cookie = rawText || null;
            if (this.cookie) {
                console.log("Cookie 加载成功。");
            }

        } catch (e) { 
            this.cookie = null; 
        }
    },

    async loadListFromFile() {
        this.playList = await fileService.readJson(CONSTANTS.FILE_PLAY_LIST, []);
    },

    async loadDownloadedSongs() {
        this.downloadedSongs = await fileService.readJson(CONSTANTS.FILE_DOWNLOADED_SONGS, {});
    },

    resetPlayer() {
        audio.stop();
        this.currSong = null;
        this.playerState.isPlaying = false;
        this.playerState.playDuration = 0;
        this.isChangingSong = false;
        this.retryCount = 0;
        this.resetLyrics();
    },

    resetLyrics() {
        this.lyrics = [];
        this.playerState.currentLyricIndex = 0;
    },

    handlePlaybackError(message) {
        this.isChangingSong = false;
        this.retryCount++;
        
        prompt.showToast({ message: `${message} (尝试第 ${this.retryCount} 次)` });
        console.error(`Playback error: ${message}. Retry count: ${this.retryCount}`);

        if (this.retryCount >= CONSTANTS.MAX_PLAYBACK_RETRIES) {
            prompt.showToast({ message: `多次尝试失败，播放已停止。请检查网络或文件。`, duration: 5000 });
            console.error("Max retries reached. Stopping playback.");
            this.resetPlayer();
            return;
        }

        setTimeout(() => {
            if (this.playList.length > 1) {
                this.change(1);
            } else {
                this.playCurrent();
            }
        }, 1500 + (this.retryCount * 1000));
    },

    second2time(second) {
        if (isNaN(second) || second < 0) return "00:00";
        const sec = Math.floor(second % 60).toString().padStart(2, "0");
        const min = Math.floor(second / 60).toString().padStart(2, "0");
        return `${min}:${sec}`;
    },
};
</script>

<style>
.demo-page {
	width: 466px;
	height: 466px;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	background-color: #000;
}

.play-button {
	width: 200px;
}

/* --- 歌词容器 --- */
.lyrics-container {
  width: 100%;
  height: 130px;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.lyrics-container-expended {
  width: 100%;
  height: 308px; /* 扩展高度以显示更多歌词 */
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

/* --- 歌词行通用样式 --- */
.lyric-line {
  width: 90%; /* 留出一些边距，避免紧贴屏幕边缘 */
  text-align: center;
  /* 默认所有歌词行都单行省略 */
  lines: 1; 
  text-overflow: ellipsis;
}

/* --- 次要歌词 (非当前高亮) --- */
.secondary-lyric {
  font-size: 22px;
  color: rgba(255, 255, 255, 0.5);
  height: 35px;
}

/* --- 当前高亮歌词 --- */
.current-lyric {
  font-size: 26px;
  color: #3ae1ff;
  font-weight: bold;
  lines: 1;
  text-overflow: ellipsis;
}

/* --- 附加歌词 (翻译/罗马音) --- */
.extra-lyric {
  font-size: 24px;
  color: rgba(255, 255, 255, 0.8);
}

/* 
 * **核心修改**: 
 * 当歌词容器处于展开状态 (.lyrics-container-expended) 时，
 * 其内部的 .current-lyric 和 .extra-lyric 将不再限制行数。
 */
.lyrics-container-expended,.current-lyric,
.lyrics-container-expended,.extra-lyric {
    lines: -1; /* -1 表示不限制行数，实现完整显示 */
}


/* --- 其他样式 (无变化) --- */
.progress {
	height: 60px;
	width: 320px;
	flex-direction: column;
	align-items: center;
}

.play-time {
	text-align: left;
	color: #ffffff;
	font-size: 22px;
	margin: 5px;
}

.play-progress {
    width: 80%;
	selected-color: #3ae1ff;
	block-color: #ffffff;
	padding-left: 0px;
	padding-right: 0px;
	margin: 0 20px;
}

.song {
	width: 320px;
	height: 80px;
	flex-direction: column;
	justify-content: center;
	align-items: center;
}

.song-name {
	width: 320px;
	font-size: 32px;
	color: #ffffff;
	lines: 1;
	text-overflow: ellipsis;
	text-align: center;
}

.singer-name {
	width: 300px;
	font-size: 24px;
	color: rgba(255, 255, 255, 0.8);
	lines: 1;
	text-overflow: ellipsis;
	text-align: center;
}

.controls {
	width: 360px;
	justify-content: space-between;
	align-items: center;
}

.icon {
	width: 80px;
	height: 80px;
}

.footer {
	height: 75px;
	width: 100%; /* 让 footer 占满宽度以容纳内部容器 */
	justify-content: center; /* 让内部容器居中 */
	align-items: center;
}

/* 新增：方屏 footer 内部容器样式 */
.footer-content-rect {
    width: 90%; /* 在方屏上使用更宽的布局 */
    justify-content: space-around;
    align-items: center;
}

/* 新增：圆屏 footer 内部容器样式 (即您原来的 .footer 样式) */
.footer-content-circle {
    width: 320px;
    justify-content: space-around;
    align-items: center;
}

.footer-icon {
  width: 64px;
  height: 64px;
}


@media screen and (shape: rect) {
    .lyrics-container {
        height: 180px;
    }
    .lyrics-container-expended {
        height: 394px;
    }
    .current-lyric {
  lines: -1;
  text-overflow: ellipsis;
}
.progress {
	height: 60px;
	width: 400px;
}
}
</style>
