<template>
  <div class="demo-page">
    <!-- 歌曲信息 -->
    <div class="song">
      <marquee class="song-name" scrollamount="{{36}}">
        {{ currSong.name || "未知" }}
      </marquee>
      <marquee class="singer-name" scrollamount="{{36}}">
        {{ currSong.artists || "未知" }}
      </marquee>
    </div>
    <!-- 播放控制按钮 -->
    <div class="controls">
      <image class="icon" src="/common/icon/prev.png" onclick="change(-1)" />
      <image class="icon" if="{{isPlaying}}" src="/common/icon/pause.png" onclick="playOrPause" />
      <image class="icon" else src="/common/icon/play.png" onclick="playOrPause" />
      <image class="icon" src="/common/icon/next.png" onclick="change(1)" />
    </div>
            <!-- 播放进度条 -->
            <slider class="play-progress" min="0" max="{{currSong.duration}}" step="1" value="{{ playDuration }}" onchange="onSliderChange"></slider>
    <!-- 底部操作按钮 -->
    <div class="footer">
      <image class="icon" src="/common/icon/volume.png" onclick="goToVolume" />
      <image class="icon" src="/common/icon/play-list.png" onclick="goToList" />
    </div>
  </div>
</template>

<script>
import router from "@system.router";
import audio, { duration } from "@system.audio";

export default {
  data: {
    // 当前歌曲索引
    index: 0,
    // 当前播放的歌曲信息
    currSong: null,
    // 需要播放的歌曲列表
    songList: [
      {
        id: 0,
        name: "KiLLKiSS",
        artists: "Ave Mujica",
        playUrl: "/common/2653641752.mp3",
        duration: 208
      },
      {
        id: 1,
        name: "栞",
        artists: "MyGO!!!!!",
        playUrl: "/common/2060083093.mp3",
        duration: 266
      }
    ],
    isPlaying: false,
    playDuration: 0,
  },

  onInit() {
    this.currSong = this.songList[this.index];
    // 音频开始播放事件
    audio.onplay = () => {
      this.isPlaying = true;
    };
    // 音频暂停播放事件
    audio.onpause = () => {
      this.isPlaying = false;
    };
    // 音频停止播放事件
    audio.onstop = () => {
      this.isPlaying = false;
    };
    // 音频播放随时间更新事件
    audio.ontimeupdate = () => {
      this.playDuration = audio.currentTime;
      this.initialSliderValue = audio.currentTime;
    };
    // 音频播放结束事件
    audio.onended = () => {
      this.change(1);
    };
    // 音频加载完成事件
    audio.onloadeddata = () => {
      // 获取音频时长
      this.info.duration = audio.duration;
    };
  },

  onReady() {
    if (this.songId) {
      this.index = this.songList.findIndex((item) => item.id === this.songId);
      this.currSong = this.songList[this.index];
    }
    setTimeout(this.playCurrsong, 1000);
  },

  playCurrsong() {
    audio.stop();
    audio.src = this.currSong.playUrl;
    audio.play();
  },

  playOrPause() {
    if (this.isPlaying) {
      audio.pause();
    } else {
      audio.play();
    }
  },

  change(dir) {
    this.index = (this.index + dir + this.songList.length) % this.songList.length;
    this.currSong = this.songList[this.index];
    this.playCurrsong();
  },

  goToVolume() {
    router.push({
      uri: "/pages/volume"
    });
  },

  goToList() {
    router.push({
      uri: "/pages/list"
    });
  },
  
  // 添加 slider 的 change 事件处理函数
  onSliderChange(e) {
    audio.currentTime = e.progress
    this.showCurrent()
    this.setLyric()
  },
  
  // 时间转换函数：将时间字符串转换为秒数
  time2second(time) {
    if (!time) return 0;
    const parts = time.split(':');
    if (parts.length === 3) {
      // 时:分:秒格式
      return parseInt(parts[0]) * 3600 + parseInt(parts[1]) * 60 + parseInt(parts[2]);
    } else if (parts.length === 2) {
      // 分:秒格式
      return parseInt(parts[0]) * 60 + parseInt(parts[1]);
    } else {
      // 只有秒
      return parseInt(parts[0]);
    }
  },
  
  // 时间转换函数：将秒数转换为时间字符串
  second2time(second) {
    if (isNaN(second) || second < 0) return '00:00';
    const sec = Math.floor(second % 60);
    const min = Math.floor((second / 60) % 60);
    const hour = Math.floor(second / 3600);
    
    if (hour > 0) {
      return `${hour.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;
    } else {
      return `${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;
    }
  },
  
  // 显示当前时间的函数
  showCurrent() {
    // 这里可以添加更新界面显示的逻辑
    console.log('当前播放时间:', this.current);
  },
  
  // 设置歌词的函数
  setLyric() {
    // 这里可以添加歌词处理的逻辑
    console.log('设置歌词');
  }
};
</script>

<style>
.demo-page {
  width: 100%;
  height: 100%;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: #000;
}

.play-button {
  width: 200px;
}

.play-progress {
  /* 添加 slider 特有的样式 */
  selected-color: #3ae1ff;
  block-color: #ffffff;
  padding-left: 0px;
  padding-right: 0px;
  margin: 0 20px;
}

.song {
  width: 320px;
  height: 160px;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.song-name {
  width: 320px;
  font-size: 42px;
  color: #ffffff;
  lines: 1;
  text-overflow: ellipsis;
  text-align: center;
}

.singer-name {
  width: 300px;
  font-size: 26px;
  color: rgba(255, 255, 255, 0.8);
  lines: 1;
  text-overflow: ellipsis;
  text-align: center;
}

.controls {
  width: 360px;
  height: 160px;
  justify-content: space-between;
  align-items: center;
}

.icon {
  width: 64px;
  height: 64px;
}

.footer {
  width: 320px;
  height: 160px;
  justify-content: space-around;
  align-items: center;
}
</style>