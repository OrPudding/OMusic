<template>
    <scroll class="menu-container" scroll-y="true" bounces="true">
        <div class="header" onclick="goBack">
            <text class="time-display">{{ currentTime }}</text>
            <text class="title">‹个人中心</text>
        </div>

        <div class="user-profile-item" onclick="handleProfileClick">
            <image class="avatar" src="{{ avatarUrl }}"></image>
            <div class="user-info">
                <text class="nickname">{{ nickname }}</text>
                <text class="user-id">{{ userId }}</text>
            </div>
        </div>

        <div class="menu-list">
            <div class="menu-item" onclick="goToSettings">
                <text class="item-text">设置</text>
                <text class="item-arrow">›</text>
            </div>
            <div class="menu-item" onclick="goToAbout">
                <text class="item-text">关于软件</text>
                <text class="item-arrow">›</text>
            </div>
        </div>
    </scroll>
</template>

<style>
    /* ... (样式无变化) ... */
    .menu-container { width: 100%; height: 100%; flex-direction: column; align-items: center; background-color: black; }
    .header { width: 100%; flex-direction: column; justify-content: center; align-items: center; }
    .title { font-size: 32px; padding: 5px; text-align: center; font-weight: bold; color: #fff; }
    .time-display { font-size: 28px; color: #ffffff; font-weight: bold; padding-top: 5px; text-align: center; }
    .user-profile-item { width: 360px; padding: 20px; margin-top: 10px; margin-bottom: 5px; background-color: rgba(255, 255, 255, 0.06); border-radius: 36px; align-items: center; }
    .avatar { width: 100px; height: 100px; border-radius: 50px; background-color: #333; }
    .user-info { flex-grow: 1; flex-direction: column; justify-content: center; margin-left: 20px; }
    .nickname { font-size: 32px; font-weight: bold; color: #ffffff; }
    .user-id { font-size: 24px; color: rgba(255, 255, 255, 0.6); margin-top: 5px; }
    .menu-list { width: 360px; flex-direction: column; align-items: center; padding-bottom: 60px; }
    .menu-item { width: 100%; height: 80px; background-color: rgba(255, 255, 255, 0.06); margin: 5px 0; border-radius: 36px; align-items: center; padding: 0 30px; justify-content: space-between; }
    .item-text { font-size: 30px; font-weight: bold; color: #ffffff; }
    .item-arrow { margin-bottom: 8px; font-size: 36px; font-weight: bold; color: rgba(255, 255, 255, 0.5); }
    @media screen and (shape: rect) {
    .header {
        padding-top: 10px;
      flex-direction: row-reverse;
      justify-content:space-around
    }
    .time-display {
        font-size: 32px;
    }
  }
</style>

<script>
import router from '@system.router';
import file from '@system.file';
import prompt from '@system.prompt';
import request from '@system.request';

// --- 常量定义 (无变化) ---
const API_USER_ACCOUNT = 'https:///user/account';
const PROFILE_FILE_URI = 'internal://files/user_profile.json';
const DEFAULT_AVATAR = '/common/icon/user.png';
const AVATAR_CACHE_DIR = 'internal://files/avatars/';
const LOCAL_AVATAR_URI = `${AVATAR_CACHE_DIR}user_avatar.png`;

export default {
    private: {
        nickname: '未登录',
        userId: 'ID: ------',
        avatarUrl: DEFAULT_AVATAR,
        currentTime: "00:00",
        isUpdating: false,
    },

    onInit( ) {
        this.updateTime();
        setInterval(() => this.updateTime(), 1000);
        // onInit 只加载本地缓存，保证快速显示
        this.loadUserProfileFromLocal();
    },

    onShow() {
        // 每次进入页面，都尝试从网络更新用户信息
        this.updateUserProfileFromServer();
    },

    updateTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        this.currentTime = `${hours}:${minutes}`;
    },
    
// profile.ux
async updateUserProfileFromServer() {
    if (this.isUpdating) return;
    this.isUpdating = true;

    try {
        const requestService = this.$app.$def.requestService;
        
        if (!requestService) {
            // ... (处理 requestService 未准备好的情况)
            return;
        }
        
        // **关键步骤**: 调用我们刚刚强化的 loadCookie 方法
        const cookie = await requestService.loadCookie();
        
        // **关键判断**: 这里的 if 判断现在变得无比强大
        if (cookie) {
            // 只有当 loadCookie 返回了格式正确的 "MUSIC_U=..." 字符串时，
            // 这里的代码块才会被执行。
            console.log("已登录 (Cookie模式)，开始从网络更新用户信息...");
            
            const url = `${API_USER_ACCOUNT}`;
            const response = await requestService.fetch({ url });

            if (response.status !== 'success' || response.data?.code !== 200) {
                throw new Error(response.message || `API错误码: ${response.data?.code}`);
            }

            const profile = response.data.profile;
            if (!profile) throw new Error("返回的用户信息为空");

            await this.updateLocalProfile(profile);
            prompt.showToast({ message: "用户信息已更新" });

        } else {
            // **关键分支**: 任何导致 loadCookie 返回 null 的情况，都会进入这里：
            // 1. cookie.txt 文件不存在。
            // 2. cookie.txt 文件为空。
            // 3. cookie.txt 文件内容格式不正确（例如，用户粘贴错了）。
            //
            // 此时，我们做的就是从本地加载旧的 profile (可能是UID登录的，也可能没有)，
            // 这完全符合预期，避免了不必要的网络请求和错误提示。
            console.log("未检测到有效 Cookie，仅从本地加载用户信息。");
            this.loadUserProfileFromLocal();
        }

    } catch (error) {
        console.error("更新用户信息失败:", error);
        prompt.showToast({ message: "信息更新失败，可尝试切换到小米运动健康连接", duration: 4000 });
    } finally {
        if (this.$app.$def.requestService) {
            this.isUpdating = false;
        }
    }
},


    async updateLocalProfile(newProfile) {
        const localAvatarPath = await this.downloadAndCacheAvatar(newProfile.avatarUrl);
        const userProfileToSave = {
            userId: newProfile.userId,
            nickname: newProfile.nickname,
            avatarUrl: localAvatarPath || DEFAULT_AVATAR,
        };
        await new Promise((resolve, reject) => {
            file.writeText({
                uri: PROFILE_FILE_URI,
                text: JSON.stringify(userProfileToSave, null, 2),
                success: resolve,
                fail: (data, code) => reject(new Error(`保存Profile失败, code: ${code}`)),
            });
        });
        this.loadUserProfileFromLocal();
    },

    loadUserProfileFromLocal() {
        file.readText({
            uri: PROFILE_FILE_URI,
            success: (data) => {
                try {
                    const profile = JSON.parse(data.text);
                    if (profile && profile.userId) {
                        this.nickname = profile.nickname;
                        this.userId = `ID: ${profile.userId}`;
                        this.avatarUrl = profile.avatarUrl || DEFAULT_AVATAR;
                    } else {
                        this.resetToDefault();
                    }
                } catch (e) {
                    this.resetToDefault();
                }
            },
            fail: () => {
                this.resetToDefault();
            }
        });
    },

    resetToDefault() {
        this.nickname = '未登录';
        this.userId = 'ID: ------';
        this.avatarUrl = DEFAULT_AVATAR;
    },

    handleProfileClick() {
        if (this.nickname === '未登录') {
            router.push({ uri: '/pages/login' });
        } else {
            prompt.showToast({ message: '正在刷新用户信息...' });
            this.updateUserProfileFromServer();
        }
    },

    downloadAndCacheAvatar(remoteUrl) {
        return new Promise((resolve) => {
            if (!remoteUrl) { resolve(null); return; }
            const thumbnailUrl = remoteUrl + (remoteUrl.includes('?') ? '&param=100y100' : '?param=100y100');
            request.download({
                url: thumbnailUrl,
                success: (task) => {
                    request.onDownloadComplete({
                        token: task.token,
                        success: (data) => {
                            file.move({
                                srcUri: data.uri,
                                dstUri: LOCAL_AVATAR_URI,
                                success: () => resolve(LOCAL_AVATAR_URI),
                                fail: () => resolve(null),
                            });
                        },
                        fail: () => resolve(null),
                    });
                },
                fail: () => resolve(null),
            });
        });
    },

    goToSettings() {
        router.push({ uri: '/pages/settings' });
    },
    goToAbout() {
        router.push({ uri: '/pages/about' });
    },
    goBack() {
        router.back();
    }
};
</script>
