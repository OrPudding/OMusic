<template>
    <scroll class="menu-container" scroll-y="true" bounces="true"> <!-- 使用与 menu.ux 相同的根容器类名 -->
        <!-- 1. 顶部时间和标题，保持一致 -->
        <div class="header" onclick="goBack">
        <text class="time-display">{{ currentTime }}</text>
        <text class="title">‹个人中心</text>
        </div>

        <!-- 2. 用户信息区域，设计成一个特殊的 "menu-item" -->
        <div class="user-profile-item" onclick="handleProfileClick">
            <image class="avatar" src="{{ avatarUrl }}"></image>
            <div class="user-info">
                <text class="nickname">{{ nickname }}</text>
                <text class="user-id">{{ userId }}</text>
            </div>
        </div>

        <!-- 3. 功能列表，使用与 menu.ux 相同的 list 和 item 结构 -->
        <div class="menu-list">
            <div class="menu-item" onclick="goToSettings">
                <text class="item-text">设置</text>
                <text class="item-arrow">›</text>
            </div>
            <div class="menu-item" onclick="goToAbout">
                <text class="item-text">关于软件</text>
                <text class="item-arrow">›</text>
            </div>
        </div>
    </scroll>
</template>
<style>
    /* --- 复用 menu.ux 的基础样式 --- */
    .menu-container {
        width: 100%;
        height: 100%;
        flex-direction: column;
        align-items: center;
        background-color: black;
    }

    .header {
        width: 100%;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .title {
        font-size: 32px;
        padding: 5px;
        text-align: center;
        font-weight: bold;
        color: #fff;
    }

    .time-display {
        font-size: 28px;
        color: #ffffff;
        padding: 5px;
        text-align: center;
    }

    /* --- 用户信息区域的特定样式 --- */
    .user-profile-item {
        width: 360px; /* 与 menu-list 同宽 */
        padding: 20px;
        margin-top: 10px;
        margin-bottom: 5px;
        background-color: rgba(255, 255, 255, 0.06);
        border-radius: 36px;
        align-items: center;
    }

    .avatar {
        width: 100px;
        height: 100px;
        border-radius: 50px; /* 圆形头像 */
        background-color: #333;
    }

    .user-info {
        flex-grow: 1;
        flex-direction: column;
        justify-content: center;
        margin-left: 20px;
    }

    .nickname {
        font-size: 32px;
        font-weight: bold;
        color: #ffffff;
    }

    .user-id {
        font-size: 24px;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 5px;
    }

    /* --- 功能列表样式 (直接复用) --- */
    .menu-list {
        width: 360px;
        flex-direction: column; /* 改为垂直排列，更适合此页面 */
        align-items: center;
        padding-bottom: 60px;
    }

    .menu-item {
        width: 100%;
        height: 80px;
        background-color: rgba(255, 255, 255, 0.06);
        margin: 5px 0;
        border-radius: 36px;
        align-items: center;
        padding: 0 30px;
        justify-content: space-between; /* 两端对齐 */
    }

    .item-text {
        font-size: 30px;
        font-weight: bold;
        color: #ffffff;
    }

    .item-arrow {
      margin-bottom: 8px;
        font-size: 36px;
        font-weight: bold;
        color: rgba(255, 255, 255, 0.5);
    }

</style>
<script>
import router from '@system.router';
import file from '@system.file';

const PROFILE_FILE_URI = 'internal://files/user_profile.json';
const DEFAULT_AVATAR = '/common/icon/user.png'; // 默认头像路径

export default {
    private: {
        nickname: '未登录',
        userId: 'ID: ------',
        avatarUrl: 'internal://files/avatars/user_avatar.png',
        currentTime: "00:00",
    },

    onInit() {
        this.loadUserProfile();
        this.updateTime();
        setInterval(() => {
            this.updateTime();
        }, 1000);
    },

    onShow() {
        // 每次返回页面时都重新加载，以反映登录后的变化
        this.loadUserProfile();
    },

    updateTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        this.currentTime = `${hours}:${minutes}`;
    },

    /**
     * **核心修改**: 加载用户配置文件的逻辑
     */
    loadUserProfile() {
        file.readText({
            uri: PROFILE_FILE_URI,
            success: (data) => {
                try {
                    const profile = JSON.parse(data.text);
                    if (profile && profile.userId) {
                        this.nickname = profile.nickname;
                        this.userId = `ID: ${profile.userId}`;
                        // **关键**: 直接使用本地文件路径，如果不存在则使用默认头像
                        this.avatarUrl = profile.avatarUrl || DEFAULT_AVATAR;
                    } else {
                        this.resetToDefault();
                    }
                } catch (e) {
                    this.resetToDefault();
                }
            },
            fail: () => {
                // 文件不存在，显示未登录状态
                this.resetToDefault();
            }
        });
    },

    /**
     * 恢复到未登录的默认状态
     */
    resetToDefault() {
        this.nickname = '未登录';
        this.userId = 'ID: ------';
        this.avatarUrl = DEFAULT_AVATAR;
    },

    handleProfileClick() {
        if (this.userId === 'ID: ------') {
            router.push({ uri: '/pages/login' });
        } else {
            prompt.showToast({ message: `已登录用户: ${this.nickname}` });
        }
    },

    goToLogin() {
        router.push({ uri: '/pages/login' });
    },
    goToSettings() {
        router.push({ uri: '/pages/settings' });
    },
    goToAbout() {
        router.push({ uri: '/pages/about' });
    },
    goBack() {
        router.back();
    }
};
</script>
