<template>
    <!-- 启用下拉刷新，并绑定事件 -->
    <scroll class="menu-container" scroll-y="true" bounces="true" 
            onscrolltop="handleRefresh">
        
        <div class="header" onclick="goBack">
            <text class="time-display">{{ currentTime }}</text>
            <text class="title">‹个人中心</text>
        </div>

        <!-- 用户信息区域的点击事件保持不变，作为另一种刷新方式 -->
        <div class="user-profile-item" onclick="handleProfileClick">
            <image class="avatar" src="{{ avatarUrl }}"></image>
            <div class="user-info">
                <text class="nickname">{{ nickname }}</text>
                <text class="user-id">{{ userId }}</text>
            </div>
        </div>

        <div class="menu-list">
            <div class="menu-item" onclick="goToSettings">
                <text class="item-text">设置</text>
                <text class="item-arrow">›</text>
            </div>
            <div class="menu-item" onclick="goToStorage">
                <text class="item-text">存储空间</text>
                <text class="item-arrow">›</text>
            </div>
            <div class="menu-item" onclick="goToAbout">
                <text class="item-text">关于软件</text>
                <text class="item-arrow">›</text>
            </div>
        </div>
    </scroll>
</template>

<style>
    /* ... (样式无变化) ... */
    .menu-container { width: 100%; height: 100%; flex-direction: column; align-items: center; background-color: black; }
    .header { width: 100%; flex-direction: column; justify-content: center; align-items: center; }
    .title { font-size: 32px; padding: 5px; text-align: center; font-weight: bold; color: #fff; }
    .time-display { font-size: 28px; color: #ffffff; font-weight: bold; padding-top: 5px; text-align: center; }
    .user-profile-item { width: 360px; padding: 20px; margin-top: 10px; margin-bottom: 5px; background-color: rgba(255, 255, 255, 0.06); border-radius: 36px; align-items: center; }
    .avatar { width: 100px; height: 100px; border-radius: 50px; background-color: #333; }
    .user-info { flex-grow: 1; flex-direction: column; justify-content: center; margin-left: 20px; }
    .nickname { font-size: 32px; font-weight: bold; color: #ffffff; }
    .user-id { font-size: 24px; color: rgba(255, 255, 255, 0.6); margin-top: 5px; }
    .menu-list { width: 360px; flex-direction: column; align-items: center; padding-bottom: 80px; }
    .menu-item { width: 100%; height: 80px; background-color: rgba(255, 255, 255, 0.06); margin: 5px 0; border-radius: 36px; align-items: center; padding: 0 30px; justify-content: space-between; }
    .item-text { font-size: 30px; font-weight: bold; color: #ffffff; }
    .item-arrow { margin-bottom: 8px; font-size: 36px; font-weight: bold; color: rgba(255, 255, 255, 0.5); }
    @media screen and (shape: rect) {
    .header {
        padding-top: 10px;
      flex-direction: row-reverse;
      justify-content:space-around
    }
    .time-display {
        font-size: 32px;
    }
    .menu-list{
        padding-bottom: 60px;
    }
  }
</style>
<script>
import router from '@system.router';
import file from '@system.file';
import prompt from '@system.prompt';
import request from '@system.request';

// --- 常量定义 (无变化) ---
const API_USER_ACCOUNT = 'https://163api.qijieya.cn/user/account';
const PROFILE_FILE_URI = 'internal://files/user_profile.json';
const DEFAULT_AVATAR = '/common/icon.png';
const AVATAR_CACHE_DIR = 'internal://files/avatars/';
const LOCAL_AVATAR_URI = `${AVATAR_CACHE_DIR}user_avatar.png`;

export default {
    private: {
        nickname: '未登录',
        userId: '点击此处以登录',
        avatarUrl: DEFAULT_AVATAR,
        currentTime: "00:00",
        isUpdating: false,
    },

    onInit( ) {
        this.updateTime();
        setInterval(() => this.updateTime(), 1000);
        // onInit 只加载本地缓存，保证快速显示，这部分逻辑非常棒，保持不变
        this.loadUserProfileFromLocal();
    },

    // **核心改动 1: 移除 onShow 方法**
    // onShow() {
    //     // 移除自动更新，避免打扰用户
    //     // this.updateUserProfileFromServer();
    // },

    updateTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        this.currentTime = `${hours}:${minutes}`;
    },
    
    /**
     * **核心改动 2: 新增下拉刷新处理函数**
     * @param {object} e - 事件对象，包含 { refreshing: true }
     */
    handleRefresh(e) {
        if (e.refreshing) {
            console.log("触发了下拉刷新...");
            // 调用更新函数，并传入一个回调，用于在结束后收起刷新动画
            this.updateUserProfileFromServer(() => {
                // $element('ID') 是获取组件实例的方法，假设你的 <scroll> 没有指定id，
                // 但通常框架会提供一种方式来控制refresher的状态。
                // 如果您的框架有更直接的API（如 this.$refs.scroll.finishPullToRefresh()），请使用那个。
                // 这是一个示意性的调用。
                this.$root().postMessage({
                    type: 'refresher.state.change',
                    data: { refreshing: false }
                });
                console.log("刷新动画已收起。");
            });
        }
    },

    /**
     * **核心改动 3: 修改 updateUserProfileFromServer 签名**
     * @param {function} [onComplete] - 操作完成后的回调函数，用于收起刷新动画等
     */
    async updateUserProfileFromServer(onComplete) {
        if (this.isUpdating) {
            if (onComplete) onComplete(); // 如果正在更新，直接结束，并收起动画
            return;
        }
        this.isUpdating = true;

        try {
            const requestService = this.$app.$def.requestService;
            if (!requestService) {
                console.log("Request service not ready.");
                return;
            }
            
            const cookie = await requestService.loadCookie();
            
            if (cookie) {
                console.log("已登录，开始从网络更新用户信息...");
                const url = `${API_USER_ACCOUNT}`;
                const response = await requestService.fetch({ url });

                if (response.status !== 'success' || response.data?.code !== 200) {
                    throw new Error(response.message || `API错误码: ${response.data?.code}`);
                }

                const profile = response.data.profile;
                if (!profile) throw new Error("返回的用户信息为空");

                await this.updateLocalProfile(profile);
                prompt.showToast({ message: "用户信息已更新" });

            } else {
                console.log("未检测到有效 Cookie，无需网络更新。");
                // 如果是未登录状态下拉刷新，可以给一个提示
                prompt.showToast({ message: "您还未登录" });
            }

        } catch (error) {
            console.error("更新用户信息失败:", error);
            prompt.showToast({ message: "信息更新失败，请检查网络", duration: 3000 });
        } finally {
            this.isUpdating = false;
            // **确保 onComplete 回调在最后被调用**
            if (onComplete) {
                onComplete();
            }
        }
    },

    // ... 其他方法 (updateLocalProfile, loadUserProfileFromLocal, 等) 保持不变 ...
    async updateLocalProfile(newProfile) {
        const localAvatarPath = await this.downloadAndCacheAvatar(newProfile.avatarUrl);
        const userProfileToSave = {
            userId: newProfile.userId,
            nickname: newProfile.nickname,
            avatarUrl: localAvatarPath || DEFAULT_AVATAR,
        };
        await new Promise((resolve, reject) => {
            file.writeText({
                uri: PROFILE_FILE_URI,
                text: JSON.stringify(userProfileToSave, null, 2),
                success: resolve,
                fail: (data, code) => reject(new Error(`保存Profile失败, code: ${code}`)),
            });
        });
        this.loadUserProfileFromLocal();
    },

    loadUserProfileFromLocal() {
        file.readText({
            uri: PROFILE_FILE_URI,
            success: (data) => {
                try {
                    const profile = JSON.parse(data.text);
                    if (profile && profile.userId) {
                        this.nickname = profile.nickname;
                        this.userId = `ID: ${profile.userId}`;
                        this.avatarUrl = profile.avatarUrl || DEFAULT_AVATAR;
                    } else {
                        this.resetToDefault();
                    }
                } catch (e) {
                    this.resetToDefault();
                }
            },
            fail: () => {
                this.resetToDefault();
            }
        });
    },

    resetToDefault() {
        this.nickname = '未登录';
        this.userId = '点击此处以登录';
        this.avatarUrl = DEFAULT_AVATAR;
    },

    handleProfileClick() {
        if (this.nickname === '未登录') {
            router.push({ uri: '/pages/login' });
        } else {
            prompt.showToast({ message: '正在刷新用户信息...' });
            // 点击头像刷新时，不需要收起动画，所以不传回调
            this.updateUserProfileFromServer();
        }
    },

    downloadAndCacheAvatar(remoteUrl) {
        return new Promise((resolve) => {
            if (!remoteUrl) {
                resolve(null);
                return;
            }
            const thumbnailUrl = remoteUrl + (remoteUrl.includes('?') ? '&param=100y100' : '?param=100y100');

            request.download({
                url: thumbnailUrl,
                success: (task) => {
                    request.onDownloadComplete({
                        token: task.token,
                        success: (data) => {
                            file.delete({
                                uri: LOCAL_AVATAR_URI,
                                complete: () => {
                                    file.move({
                                        srcUri: data.uri,
                                        dstUri: LOCAL_AVATAR_URI,
                                        success: () => resolve(LOCAL_AVATAR_URI),
                                        fail: () => resolve(null),
                                    });
                                }
                            });
                        },
                        fail: () => resolve(null),
                    });
                },
                fail: () => resolve(null),
            });
        });
    },

    goToSettings() { router.push({ uri: '/pages/settings' }); },
    goToStorage() { router.push({ uri: '/pages/storage' }); },
    goToAbout() { router.push({ uri: '/pages/about' }); },
    goBack() { router.back(); }
};
</script>
