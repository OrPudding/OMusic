<template>
    <!-- 启用下拉刷新，并将事件统一绑定到 handleManualRefresh -->
    <scroll id="userProfileScroll" class="menu-container" scroll-y="true" bounces="true" 
            onscrolltop="handleManualRefresh">
        
        <div class="header" onclick="goBack">
            <text class="time-display">{{ currentTime }}</text>
            <text class="title">‹个人中心</text>
        </div>

        <!-- 用户信息区域的点击事件也统一绑定到 handleManualRefresh -->
        <div class="user-profile-item" onclick="handleManualRefresh">
            <image class="avatar" src="{{ avatarUrl }}"></image>
            <div class="user-info">
                <text class="nickname">{{ nickname }}</text>
                <text class="user-id">{{ userId }}</text>
            </div>
        </div>

        <div class="menu-list">
            <div class="menu-item" onclick="goToSettings">
                <text class="item-text">设置</text>
                <text class="item-arrow">›</text>
            </div>
            <div class="menu-item" onclick="goToStorage">
                <text class="item-text">存储空间</text>
                <text class="item-arrow">›</text>
            </div>
            <div class="menu-item" onclick="goToAbout">
                <text class="item-text">关于软件</text>
                <text class="item-arrow">›</text>
            </div>
        </div>
    </scroll>
</template>

<style>
    /* 样式完全不变 */
    .menu-container { width: 100%; height: 100%; flex-direction: column; align-items: center; background-color: black; }
    .header { width: 100%; flex-direction: column; justify-content: center; align-items: center; }
    .title { font-size: 32px; padding: 5px; text-align: center; font-weight: bold; color: #fff; }
    .time-display { font-size: 28px; color: #ffffff; font-weight: bold; padding-top: 5px; text-align: center; }
    .user-profile-item { width: 360px; padding: 20px; margin-top: 10px; margin-bottom: 5px; background-color: rgba(255, 255, 255, 0.06); border-radius: 36px; align-items: center; }
    .avatar { width: 100px; height: 100px; border-radius: 50px; background-color: #333; }
    .user-info { flex-grow: 1; flex-direction: column; justify-content: center; margin-left: 20px; }
    .nickname { font-size: 32px; font-weight: bold; color: #ffffff; }
    .user-id { font-size: 24px; color: rgba(255, 255, 255, 0.6); margin-top: 5px; }
    .menu-list { width: 360px; flex-direction: column; align-items: center; padding-bottom: 80px; }
    .menu-item { width: 100%; height: 80px; background-color: rgba(255, 255, 255, 0.06); margin: 5px 0; border-radius: 36px; align-items: center; padding: 0 30px; justify-content: space-between; }
    .item-text { font-size: 30px; font-weight: bold; color: #ffffff; }
    .item-arrow { margin-bottom: 8px; font-size: 36px; font-weight: bold; color: rgba(255, 255, 255, 0.5); }
    @media screen and (shape: rect) {
    .header {
        padding-top: 10px;
      flex-direction: row-reverse;
      justify-content:space-around
    }
    .time-display {
        font-size: 32px;
    }
    .menu-list{
        padding-bottom: 60px;
    }
  }
</style>

<script>
import router from '@system.router';
import file from '@system.file';
import prompt from '@system.prompt';
import request from '@system.request';

// --- 常量定义 ---
const API_USER_ACCOUNT = 'https://163api.qijieya.cn/user/account';
const PROFILE_FILE_URI = 'internal://files/user_profile.json';
const COOKIE_FILE_URI = 'internal://files/cookie.txt';
const DEFAULT_AVATAR = '/common/icon.png';
const AVATAR_CACHE_DIR = 'internal://files/avatars/';
const LOCAL_AVATAR_URI = `${AVATAR_CACHE_DIR}user_avatar.png`;

export default {
    private: {
        nickname: '未登录',
        userId: '点击此处以登录',
        avatarUrl: DEFAULT_AVATAR,
        currentTime: "00:00",
        isUpdating: false,
    },

    onInit( ) {
        this.updateTime();
        setInterval(() => this.updateTime(), 1000);
        // onInit 只在页面首次创建时执行，加载一次本地数据用于快速展示
        this.loadUserProfileFromLocal();
    },

    onShow() {
        // onShow 在每次页面变为可见时执行（包括从登录页返回）
        // 这是确保UI与本地持久化数据同步的关键
        console.log("user.ux onShow: 从本地文件加载最新用户信息。");
        this.loadUserProfileFromLocal();
    },

    updateTime() {
        const now = new Date();
        this.currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    },
    
    /**
     * @description 从本地文件读取用户信息并更新UI。这是本页面唯一的UI更新源。
     */
    loadUserProfileFromLocal() {
        file.readText({
            uri: PROFILE_FILE_URI,
            success: (data) => {
                try {
                    const profile = JSON.parse(data.text);
                    if (profile && profile.userId) {
                        this.nickname = profile.nickname;
                        this.userId = `ID: ${profile.userId}`;
                        this.avatarUrl = profile.avatarUrl || DEFAULT_AVATAR;
                    } else {
                        this.resetToDefault();
                    }
                } catch (e) {
                    this.resetToDefault();
                }
            },
            fail: () => {
                // 如果文件不存在，也视为未登录状态
                this.resetToDefault();
            }
        });
    },

    /**
     * @description 将UI重置为未登录的默认状态。
     */
    resetToDefault() {
        this.nickname = '未登录';
        this.userId = '点击此处以登录';
        this.avatarUrl = DEFAULT_AVATAR;
    },

    /**
     * @description 统一处理所有用户手动触发的刷新操作（点击头像、下拉刷新）。
     */
    handleManualRefresh(e) {
        // 如果是下拉刷新事件，检查 refreshing 标志
        if (e && e.type === 'scrolltop' && !e.refreshing) {
            return;
        }

        // 如果当前是未登录状态，则跳转到登录页
        if (this.nickname === '未登录') {
            router.push({ uri: '/pages/login' });
            return;
        }

        // 如果已登录，则执行网络刷新流程
        if (this.isUpdating) {
            prompt.showToast({ message: '正在刷新中，请稍候...' });
            return;
        }
        
        prompt.showToast({ message: '正在刷新用户信息...' });
        this.performNetworkRefresh(() => {
            // 刷新结束后，收起下拉刷新动画（如果是通过下拉触发的）
            if (e && e.type === 'scrolltop') {
                this.$element('userProfileScroll').finishPullToRefresh();
            }
        });
    },

    /**
     * @description 执行网络刷新，并更新本地数据。
     * @param {function} [onComplete] - 无论成功或失败，最后都会调用的回调函数。
     */
    async performNetworkRefresh(onComplete) {
        this.isUpdating = true;
        
        try {
            const requestService = this.$app.$def.requestService;
            if (!requestService) throw new Error("内部服务错误");
            
            // 刷新时，必须依赖已存在的 Cookie
            const cookie = await requestService.loadCookie();
            if (!cookie) {
                prompt.showToast({ message: "登录状态已失效，请重新登录" });
                // 清理本地过时的 profile 和 cookie 文件
                file.delete({ uri: PROFILE_FILE_URI });
                file.delete({ uri: COOKIE_FILE_URI });
                this.resetToDefault();
                throw new Error("Cookie not found");
            }

            const url = API_USER_ACCOUNT;
            const response = await requestService.fetch({ url }); // requestService 会自动带上全局cookie

            if (response.status !== 'success' || response.data?.code !== 200) {
                throw new Error("刷新失败，请检查网络或Cookie");
            }
            const profile = response.data.profile;
            if (!profile) throw new Error("获取信息为空");

            // 拉取到新信息后，依然走“下载头像->保存文件”的流程
            const localAvatarPath = await this.downloadAndCacheAvatar(profile.avatarUrl);
            const userProfileToSave = {
                userId: profile.userId,
                nickname: profile.nickname,
                avatarUrl: localAvatarPath || DEFAULT_AVATAR,
            };
            await this.saveProfileToFile(userProfileToSave);
            
            // 最后，从刚刚更新的文件中重新加载，以刷新UI
            this.loadUserProfileFromLocal();
            prompt.showToast({ message: "用户信息已是最新" });

        } catch (error) {
            console.error("手动刷新失败:", error);
            // 不显示具体的 error.message，因为可能包含技术细节
            prompt.showToast({ message: "刷新失败，请稍后重试" });
        } finally {
            this.isUpdating = false;
            if (onComplete) {
                onComplete();
            }
        }
    },

    // --- 辅助函数 ---
    downloadAndCacheAvatar(remoteUrl) {
        return new Promise((resolve) => {
            if (!remoteUrl) { resolve(null); return; }
            const thumbnailUrl = remoteUrl + (remoteUrl.includes('?') ? '&param=100y100' : '?param=100y100');
            request.download({
                url: thumbnailUrl,
                success: (task) => {
                    request.onDownloadComplete({
                        token: task.token,
                        success: (data) => {
                            file.delete({
                                uri: LOCAL_AVATAR_URI,
                                complete: () => {
                                    file.move({
                                        srcUri: data.uri,
                                        dstUri: LOCAL_AVATAR_URI,
                                        success: () => resolve(LOCAL_AVATAR_URI),
                                        fail: () => resolve(null),
                                    });
                                }
                            });
                        },
                        fail: () => resolve(null),
                    });
                },
                fail: () => resolve(null),
            });
        });
    },
    saveProfileToFile(profileData) {
        return new Promise((resolve, reject) => {
            file.writeText({
                uri: PROFILE_FILE_URI,
                text: JSON.stringify(profileData, null, 2),
                success: resolve,
                fail: (data, code) => reject(new Error(`保存Profile失败, code: ${code}`)),
            });
        });
    },

    // --- 页面跳转 ---
    goToSettings() { router.push({ uri: '/pages/settings' }); },
    goToStorage() { router.push({ uri: '/pages/storage' }); },
    goToAbout() { router.push({ uri: '/pages/about' }); },
    goBack() { router.back(); }
};
</script>
